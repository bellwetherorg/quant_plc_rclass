 ---
title: "Basic data analysis (tidyverse)"
date: "April 9, 2024"
output:
  html_document: # Specify the output format as HTML document
    revealjs::revealjs_presentation:
      chalkboard: true
runtime:
  shiny: false
---

## Agenda

-   Introduction to the `tidyverse` (10 minutes)
-   Live coding demonstration (10 minutes)
-   Partner work cleaning a data set (20 minutes)
-   Creating a token and cloning a GitHub repository in RStudio (15 minutes)
-   Next class and homework (5 minutes)

# Introduction to the `tidyverse`

## R is a functional programming language - most of what you will do in R is work with functions

A function:

-   Takes a specific input
-   Performs an operation
-   Returns in output

Functions are helpful tools to reduce repetition in typing and improves your code's consistency, reliability and readability.

## The tidyverse is a powerful collection of R packages that work well together {.smaller .scrollable}

::: columns
::: {.column width="50%"}
::: columns
-   The most popular packages in the R community are past of what is called the "tidyverse," which includes packages like `ggplot2`, `tidyr`, `stringr`, `tibble`, and `purrr`.

-   `Tidyverse` packages are built to work together. Every `tidyverse` package contains functions that can manipulate or visualize data that lives in data frames.

-   Most functions in the `tidyverse` require a data frame (R's version of a table) as the first argument in each function. The functions can be "chained" together with other functions.

-   We will explore the `tidyverse` by looking at EdBuild's FY2019 education data compiled from the F33 survey, SAIPE, EDGE, and CCD. The `edbuildr` package provides access to clean district data on funding, student demographics, and wealth.
:::
:::

::: {.column width="50%"}
![](https://education.rstudio.com/blog/2020/07/teaching-the-tidyverse-in-2020-part-1-getting-started/img/tidyverse-packages.png)
:::
:::

## To read EdBuild's finance data into our working environment we will use the masterpull() function {.smaller .scrollable}

```{r}
#| echo: true
#| eval: false

library(edbuildr)

edbuild_fin_fy19 <- masterpull(data_year = 2019, data_type = "fin")
```

This code will load the `edbuildr` package and then download a clean dataframe from EdBuild's server and store it as a variable called `edbuild_fin_fy19`.

There are three options for the `data_type` argument:

-   "geo": only includes districts with geographic boundaries (no charter/special school districts) that meet EdBuild's criteria for fiscal analysis
-   "fin": includes all districts that meet EdBuild's criteria for fiscal analysis
-   "full": includes all districts -- TO BE USED WITH CAUTION

## The dplyr() package provides many functions to manipulate your data frames' columns and rows {.smaller .scrollable}

The functions you'll most frequently use from the dplyr packages are:

-   `select()`: names columns to keep from a data frame
-   `rename()`: name columns to keep from a data frame
-   `filter()`: remove rows that do not meet the condition in the logical statement from the output
-   `mutate()`: create a new column that will be added to the end of your data frame.

## A special operator called a "pipe" will allow you to chain several functions together {.smaller .scrollable}

-   In R, the pipe operator is a vertical bar and a greater-than sign: `|>`

-   Instead of "nesting" the results of one function inside of another, the pipe allows you to execute the same command in a more human-readable order.

```{r}
#| echo: true
#| eval: false
#| 
# example of "nesting" the result of one function inside another function. 
df1 <- select(filter(raw_df, enroll > 10000), dist_id, dist_name, enroll, rev_pp)

# example of using the "pipe" to produce the same as above 
# read the pipe as "and then" to understand what's being done to your data
df2 <- raw_df |> # start with raw_df AND THEN DO THIS 
  filter(enroll > 10000) |> # filter for enrollment > 10,000 AND THEN DO THIS 
  select(dist_id, dist_name, enroll, rev_pp) # select only these columns


```

# Iterative exploratory analysis

## LIVE CODING EXAMPLE: exploring_the_tidyverse.R

```{r}
#| echo: true

# class_2_example 
# Last updated by Krista Kaput, 2024-03-29

# load ----------

options(scipen = 999)

library(tidyverse)
library(edbuildr)

# Krista likes to denote which spreadsheet is raw for transparency 
dist_fy19_raw <- masterpull(data_type = "geo")

# Use the "filter" function to get the Minnesota data -----------

mn_ed_data <- dist_fy19_raw |>
  filter(State == "Minnesota") 

# Use "rename" function to change names of Minnesota variables --------

mn_ed_data <- mn_ed_data |>
  rename(district = NAME,
         county = County,
         enroll = ENROLL, 
         total_local_rev = LR) 


# Use "mutate" function to create a local revenue pp variable -----
mn_ed_data <- mn_ed_data |>
  mutate(local_rev_pp = total_local_rev/enroll) 

# Filter the districts that do not have enrollment or have NA enrollment ------

mn_ed_data_clean <- mn_ed_data |>
  filter(enroll > 0)

# Use "select" function to choose the variables you want in your data frame ---------

mn_ed_data_clean <- mn_ed_data_clean |>
  select(district, county, enroll, total_local_rev, local_rev_pp)


```

# Partner Work

## In pairs, you will work together to create a clean data frame for a state.

-   **Julia and Kelly:** Illinois
-   **Indira and Priyanka:** Tennessee
-   **Marisa and Brian:** Maryland
-   **Ebony,Teresa, and Libby:** Virginia
-   **Sophie and Nora:** Massachusetts

Krista and Alex will be circulating to the different pairs to answer questions and offer support.

# Creating a Token and Cloning a GitHub Repository in RStudio

## Go to https://github.com/setting/tokens {.smaller}

Under "Generate New Token" Choose the "Classic" option

![](class_2_images/Screenshot%202024-04-08%20at%209.22.12%20PM.png){fig-align="center"}

## Name the token something useful like "2024-quant-plc-r-class" {.smaller}

You can choose an expiration date, but I have chosen no expiration date. Select the following: "repo", "user", "gist", and "workflow" and then generate your token. SAVE YOUR TOKEN!!!!

![](class_2_images/Screenshot%202024-04-08%20at%209.15.34%20PM.png){fig-align="center"}

## In your RStudio console, install the `usethis`, `gitcreds`, and `gh` packages 
Type the following code int your console: install.packages(c("usethis", "gitcreds", "gh"))

![](class_2_images/Screenshot%202024-04-09%20at%2010.39.15%20AM.png){fig-align="center"}

## In your RStudio console, type **gitcreds::gitcreds_set()** and then paste your token {.smaller}

![](class_2_images/Screenshot 2024-04-09 at 10.42.26 AM.png){fig-align="center"}

## In your RStudio console, type **gh::gh_whoami()**
If we set up the token correctly this will show your information and confirm you are all set! 

![](class_2_images/Screenshot 2024-04-09 at 10.45.27 AM.png){fig-align="center"}

## You will receive an email with an invitation to join the GitHub organization for this training {.smaller}

![](class_2_images/Screenshot%202024-04-08%20at%205.35.56%20PM.png){fig-align="center"}

## Once you click the "View Invitation" button, you will be directed to join the organization {.smaller}

![](class_2_images/Screenshot%202024-04-08%20at%208.37.30%20PM.png){fig-align="center"}

## Bookmark the organization page

Your homework assignments will show up here as repositories

![](class_2_images/Screenshot%202024-04-08%20at%208.38.30%20PM.png){fig-align="center"}

## To start an assignment, navigate to the repository and copy the HTTPS link that appears when you click the "Code" button {.smaller}

![](class_2_images/Screenshot%202024-04-08%20at%208.45.25%20PM.png){fig-align="center"}

## Next, you'll open RStudio and create a new project, selecting the "Version control" and "Git" options {.smaller}

![](git_process/04-new-proj.png)

## Next, you'll open RStudio and create a new project, selecting the "Version Control" and "Git" options {.smaller}

![](git_process/05-git-proj.png)

## Be sure to select a folder where you want to have your homework files saved before you click "Open" {.smaller}

![](git_process/06-select-path.png){fig-align="center"}

## You're now ready to start working on your homework!

Start by opening the README.md file

![](class_2_images/Screenshot%202024-04-08%20at%209.04.09%20PM.png){fig-align="center"}

## The README.md file is a text file that will include instructions for your assignment

Using the "Visual" option will make it easier to read

![](class_2_images/Screenshot%202024-04-08%20at%208.49.48%20PM.png){fig-align="center"}

## The README.md file is a text file that will include instructions for your assignment

Using the "Visual" option will make it easier to read

![](class_2_images/Screenshot%202024-04-08%20at%208.50.06%20PM.png){fig-align="center"}

## Once you've completed your assignment, you'll want to "stage" your changes and then start the "commit" process {.smaller}

![](git_process/12-gh-push.png){fig-align="center"}

# Next Class and Homework

## Coming Up {.smaller .scrollable}

::: columns
::: {.column width="45%"}
**Next Class**

-   The next class will be **Tuesday, April 23 from 11:00 AM - 12:00 PM CT.**

-   We will do a deep dive into the `ggplot2` and do basic data visualization in R (scatterplots)
:::

::: {.column width="45%"}
**Homework**

-   Coding task: Use the hw_02_template.R file in the /scripts folder to complete the tasks that are outlined in the script.
-   **Homework is due by COB on Thursday, April 18**. This ensures that Krista can review your assignments and provide feedback by the April 23 R Class.
-   Please make sure you commit and then push your homework updates using Git to update the repository.
:::
:::
