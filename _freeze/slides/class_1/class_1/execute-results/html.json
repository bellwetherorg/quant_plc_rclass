{
  "hash": "96211c9c995905858bb04ca72887a31a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R, RStudio, Git, and GitHub\"\ndate: \"March 19, 2024\"\nformat: \n  revealjs:\n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: false\n  message: false\n  warning: false\n---\n\n::: {.cell}\n\n:::\n\n\n# Introductions\n\n## Agenda\n\n-   Course Overview (5 min)\n\n-   Introduction to R and RStudio (20 min)\n\n-   RStudio Setup and Workflow Tips (10 min)\n\n-   Introduction to Git and GitHub (20 min)\n\n-   Next class and Homework (5 min)\n\n## Meet your R instructors {.smaller}\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: center\"}\n![**Krista Kaput**, Senior Analyst](img/kaput.jpg){width=\"400\"}\n:::\n\n::: {.column width=\"50%\" style=\"text-align: center\"}\n![Alex Spurrier](img/spurrier.jpg){width=\"400\"}\n:::\n:::\n\n# Course Overview\n\n## Goals for this course\n\n::: callout\nOur primary goal is to support Bellwarians build their data cleaning, analysis, and visualization skills in R.\n:::\n\nWe will achieve this by helping you learn how to do the following:\n\n-   Data cleaning and analysis\n\n-   Join two or more data frames\n\n-   Advanced data visualizations, including charts, graphs, and maps\n\n-   Create high-quality presentations using Quarto\n\n## A couple of examples of data visualizations you will be able to do by the end of the course {.smaller .scrollable}\n\n::: columns\n::: {.column width=\"50%\"}\n![](img/pp_diff_map.png){width=\"500\"}\n\n:::\n\n::: {.column width=\"50%\"}\n\n![](img/wsf_vs_current.png){width=\"600\"}\n\n:::\n:::\n\n## Course website and class structure\n\n::: columns\n::: {.column width=\"50%\"}\n[**Course website**](https://bellwetherorg.github.io/quant_plc_rclass/)\n\n-   Schedule\n-   Slides\n-   Homework\n-   Lecture recordings\n:::\n\n::: {.column width=\"50%\"}\n**Class structure**\n\n-   Lecture and review (20 min)\n-   In-class exercise (35 min)\n-   Homework (5 min)\n\nThere will be **short** homework assignments to help you build and grow your R skills.\n:::\n:::\n\n## Course calendar {.smaller}\n\n| **Week** | **Class Date** | **Description**                                                 |\n|:--------------:|:--------------:|:----------------------------------------|\n|  Week 1  |    March 19    | Introduction to R, RStudio, Git, and GitHub                     |\n|  Week 2  |    April 9     | Basic data analysis in R (tidyverse)                            |\n|  Week 3  |    April 23    | Basic data visualization in R (ggplot2)                         |\n|  Week 4  |     May 14     | Data cleaning and process in R part 1                           |\n|  Week 5  |    June 11     | Data cleaning and process in R part 2                           |\n|  Week 6  |    July 23     | Advanced data visualization in R (ggplot2/plotly)               |\n|  Week 7  |   August 13    | Census data in R (tidycensus)                                   |\n|  Week 8  |  September 3   | Creating maps in R (sf and leaflet)                             |\n|  Week 9  |  September 24  | Introduction to Quarto and creating presentations in R (Quarto) |\n| Week 10  |   October 22   | Debrief the course                                              |\n\n# Introduction to R and RStudio\n\n## What are R and RStudio and how do they work together? {.smaller}\n\n**R** is a statistical programming language. **RStudio** is a graphical user interface (GUI) that allows R users to better organize and execute R code.\n\n![](https://d33wubrfki0l68.cloudfront.net/0b4d0569b2ddf6147da90b110fbb2a17653c8b08/f06f3/images/shutterstock/r_vs_rstudio_1.png)\n\n::: aside\nSource: [Modern Drive](https://moderndive.com/1-getting-started.html)\n:::\n\n## Compared to other data analysis tools, R and RStudio are more powerful and precise -- it's a blessing and a curse\n\n![](img/excel_bike_r_porsche.png){fig-align=\"center\"}\n\n## Working in R with RStudio allows for highly reproducible data analysis and straightforward quality checking {.smaller .scrollable}\n\n**One of the best features of R is that it is *very* surly**.\n\n-   It will not do anything to your data unless you explicitly tell it to do so\n-   Contrast this with Excel, which often tries to be helpful with auto-formatting\n\n**Data analysis in R is easy to reproduce**\n\n-   R code \"reads\" data from your hard drive into a working environment for cleaning and analysis\n-   Anyone with the same raw data files and R scripts can run the code and produce the same results\n-   It will NOT edit underlying data files unless you explicitly write code to do so R's surly nature is very helpful in this respect\n\n**Conducting quality checks in R scripts is much easier than in Excel workbooks**\n\n-   Every step of data cleaning and analysis is clearly articulated, in order.\n-   Working with R scripts minimizes the potential for [\"fat finger\" errors](https://www.theguardian.com/business/2022/jun/03/flash-crash-set-off-by-fat-fingered-citigroup-trader-could-cost-50m).\n\n## RStudio's interface is divided into quadrants that allow users to edit and run code, view plots, and read help docs {.smaller}\n\n![](img/rstudio_setup.png){fig-align=\"center\"}\n\n## At its core, R allows you to work with variables and functions\n\nIn the R environment, data is stored in variables that can be manipulated using functions.\n\nThe most basic functions in R are called *operators*:\n\n-   The most important operator is the assignment arrow: `<-`\n-   Used to store value in a new or existing variable `x <- 3`\n-   Basic operators include: `+, - , /, *, %, ^`\n-   R comes pre-installed with functions that perform commonly-used operations: `sum()`, `mean()`, `median()`, `percentile()`\n\n## Variables in R mostly include a few different types\n\nVariables can have different types:\n\n-   Integer `3`\n-   Float (decimal) `3.14`\n-   Character `“pi”`\n-   Factor (categorical, ordered variable) `“Low”, “Medium”, “High”`\n\n## Variables can be stored as single values or as *vectors* of multiple values {.smaller .scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nx <- 3 # <1>\n\ny <- c(2, 4, 5) # <2>\nz <- c(\"a\", \"b\", \"c\") # <2>\n\ndf <- tibble(letters = z, nums = y) # <3>\n\ndf #<4>\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  letters  nums\n  <chr>   <dbl>\n1 a           2\n2 b           4\n3 c           5\n```\n\n\n:::\n:::\n\n\n1.  Variables can be stored on their own.\n2.  Or as a *vector* of multiple variables of the same type.\n3.  Vectors can be joined together to create *dataframes* (tables) using a range of functions.\n4.  If you just run variable name in your code, R will print out its contents.\n\n## CODING EXAMPLE -- Basic R use {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# basic r use ------------\n\n# creating variables using the assignment operator \"<-\"\nvar1 <- 12\nvar2 <- 34\n\n# you can do operations on variables\nvar1 + var2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 46\n```\n\n\n:::\n\n```{.r .cell-code}\n# we need to store them as a new variable\nvar1_var2_sum <- var1 + var2\n\n# you can group variables together in a vector using the \n# concatenate function \"c()\" to create vectors\nvar_values <- c(var1, var2)\nvar_names <- c(\"Tom Brady\", \"Nolan Ryan\")\n\n# you can run functions across the values in a vector\nmean(var_values)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23\n```\n\n\n:::\n\n```{.r .cell-code}\n# individual positions in vectors can be referenced\nvar_names[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tom Brady\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# vectors of equal length can be grouped into tables, called dataframes\nathlete_df <- data.frame(name = var_names, jersey = var_values)\n\n# column names are referenced using \"$\"\nathlete_df$name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Tom Brady\"  \"Nolan Ryan\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# you can run functions on dataframe columns\nmean(athlete_df$jersey)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23\n```\n\n\n:::\n\n```{.r .cell-code}\n# but you need to be sure you're using the right datatype\nmean(athlete_df$name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n## Packages are collections of R functions -- they allow users to easily extend what they can do in R {.smaller .scrollable}\n\n::: columns\n::: {.column width=\"50%\"}\n-   Packages are an important part of expanding what users can do in R, minimizing barriers to high-quality data analysis and visualization.\n\n-   The most popular packages are available directly through RStudio via the CRAN network.\n\n    -   CRAN packages are reviewed by the R community for quality\n\n    -   Can be installed via the RStudio GUI or through the R console via the install.packages() function\n\n-   The most popular packages in the R community are part of what is called the \"tidyverse\"\n\n    -   `ggplot2`, `tidyr`, `dplyr`, `stringr`, `forcats`, `tibble`, `readr`, `purrr`\n\n    -   Tidyverse packages are built to work together\n:::\n\n::: {.column width=\"50%\"}\n![](img/tidy_packages.png){fig-align=\"center\"}\n:::\n:::\n\n# RStudio Setup and Workflow Tips\n\n## Adjusting your RStudio defaults {.smaller .scrollable}\n\n::: columns\n::: {.column width=\"50%\"}\n-   When working in RStudio, you want to be sure you control and understand everything in your working environment\n-   By default, R will save the variables and history of what you're working on as you quit and bring in back when you restart\n-   This creates bad data management habits -- you want to start each coding session fresh, building up your variables by running your code\n-   Don't rely on remembering what past you was trying to do!\n:::\n\n::: {.column width=\"50%\"}\n![](img/working_env_default.png){fig-align=\"center\"}\n:::\n:::\n\n## RStudio lets you arrange your interface in different ways; we should share a common approach\n\n![](img/rstudio_panes.png){fig-align=\"center\"}\n\n## You'll spend a lot of time working in RStudio -- you should make it look like something that you'll enjoy seeing\n\n![](img/rstudio_themes.png){fig-align=\"center\"}\n\n## Use Tab to auto-complete a variable or function as you are typing it, or the up/down arrows to cycle through options\n\n![](img/autocomplete.png){fig-align=\"center\"}\n\n## Use CMD/CTRL + ENTER to run a line of code from your script in the console\n\n![](img/cmd_enter.png){fig-align=\"center\"}\n\n## If your cursor is in the console, you can use the up/down arrows to cycle through previously executed code\n\n![](img/prev_command.png){fig-align=\"center\"}\n\n## Use CMD/CTRL + SHIFT + 0 to restart RStudio often {.smaller .scrollable}\n\n::: columns\n::: {.column width=\"50%\"}\nThis key command will clear your workspace ---- it's an important step to do often to ensure that you're only relying on code you're writing in scripts and not code you're executing on the fly in the console\n:::\n\n::: {.column width=\"50%\"}\n[Hadley Wickham said it best](https://r4ds.had.co.nz/workflow-projects.html):\n\n\"This will cause you some short-term pain, because now when you restart RStudio it will not remember the results of the code that you ran last time. But this short-term pain will save you long-term agony because it forces you to capture all important interactions in your code. There's nothing worse than discovering three months after the fact that you've only stored the results of an important calculation in your workspace, not the calculation itself in your code.\"\n:::\n:::\n\n## There are lots of other helpful shortcuts in RStudio\n\n-   [RStudio keyboard shortcuts](https://support.posit.co/hc/en-us/articles/200711853-Keyboard-Shortcuts-in-the-RStudio-IDE)\n\n-   [RStudio IDE cheatsheet](https://posit.co/wp-content/uploads/2022/10/rstudio-ide-1.pdf)\n\n# Introduction to Git and GitHub\n\n## What is git? {.smaller}\n\nGit is *version control software* -- it allows you to save (commit) changes to files and track those changes over time.\n\n![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/78587c8b-fa99-4c94-bce2-026cf4e588b5_rw_1920.png?h=a9bcd5a907323d4cb9806a7c75fad319){fig-align=\"center\" width=\"800\"}\n\n::: aside\nSource: [Artwork by \\@allison_horst](https://twitter.com/allison_horst)\n:::\n\n## What is GitHub? {.smaller}\n\nGitHub is to Git what RStudio is to R, but for file management.\n\n![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/7a5f458a-3d63-4e46-8a09-c417e52587ea_rw_1920.png?h=bee94bf23b391e8c9cbe190dd78b631d){fig-align=\"center\" width=\"889\"}\n\n::: aside\nSource: [Artwork by \\@allison_horst](https://twitter.com/allison_horst)\n:::\n\n## GitHub helps you collaborate with others, including past and future versions of yourself {.smaller}\n\n![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/33f12eb3-e65b-46df-9a2e-e4b24a4b59cd_rw_1920.png?h=d7b1f2c0b41d04a766ad6d7bc6bd8c80){fig-align=\"center\" width=\"889\"}\n\n::: aside\nSource: [Artwork by \\@allison_horst](https://twitter.com/allison_horst)\n:::\n\n## We will use GitHub to distribute, collect, and collaborate on in-class exercises and homeowrk {.smaller}\n\n![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/51566506-f87b-465b-934b-c0707b8636e0_rw_1920.jpeg?h=d712ca4f9e8577bdebe03757c66ec804){fig-align=\"center\" width=\"889\"}\n\n::: aside\nSource: [Artwork by \\@allison_horst](https://twitter.com/allison_horst)\n:::\n\n# Next Class and Homework\n\n## Coming Up {.smaller}\n\n::: columns\n::: {.column width=\"45%\"}\n**Next Class**\n\n-   The next class will be **Tuesday, April 9 from 11:00 AM - 12:00 PM CT.**\n\n-   We will do a deep dive into the `tidyverse` and the main functions we use to do data cleaning.\n\n-   You all will clean and manipulate data frames using data from the `edbuildr` package.\n:::\n\n::: {.column width=\"45%\"}\n**Homework**\n\n-   Set up your RStudio interface to your taste (\"RStudio Setup and Workflow Tips\" slides).\n\n-   If you weren't able to complete all of the pre-class setup, please do that.\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}