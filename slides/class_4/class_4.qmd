---
title: "Data Cleaning and Processing in R: Part 1"
date: "May 14, 2024"
css:
  - |
    .smaller h1 {
      font-size: 0.5em; /* Adjust the font size as needed */
    }
output:
  quarto::quarto_presentation:
    format: revealjs
    theme: 
      logo: images/primary_full-color.png
      theme: theme/slides.scss # Choose a theme for your presentation (e.g., simple, serif, solarized, etc.)
    incremental: true # Whether to display content incrementally (one step at a time)
    self_contained: true # Whether to create a standalone HTML file
    highlight_style: "github" # Syntax highlighting style (e.g., github, monokai, etc.)
    revealjs:
      controls: true # Display navigation controls (e.g., arrows, slide number, etc.)
      progress: true # Display a progress bar
      slideNumber: true # Display slide numbers
      center: true # Center the content on each slide
      chalkboard: true # Enable chalkboard mode for reveal.js
---

```{r}
#| output: false

library(tidyverse)
library(countdown)
library(tigris)
library(sf)
library(scales)
library(edbuildr)
library(viridis)
library(readxl)




bw_primary <- c("#6D1E4A", # 1 plum
                "#007786", # 2 teal
                "#0D525A", # 3 dark green
                "#212B46", # 4 navy
                "#5A6675", # 5 grey
                "#F0DEC1") # 6 cream

bw_secondary <- c("#FFC762", # 1 yellow
                  "#FFB653", # 2 orange
                  "#BEC6CE", # 3 light grey
                  "#2E1A4A", # 4 deep purple
                  "#7EA2D1", # 5 soft blue
                  "#CAD3FB", # 6 lavender
                  "#9CD4EA", # 7 sky
                  "#FFA497") # 8 peach


```

## Agenda

-   Homework review
-   Principles of tidy data
-   Techniques to clean messy data
-   Joining data sets
-   Homework and next class

# Homework Review

## Homework Review: Format Scatter Plots

For those who turned in homework, you all did a great job with creating clean data frames and everyone made scatter plots. We were mixed on formatting scatter plots. The code below includes all the key elements of a beautified scatter plot.

```{r echo=TRUE, eval=FALSE}

ggplot(vt_ed_data, aes (x = mpv, y = local_rev_pp, size = enroll, color = stpovrate)) + 
  geom_point(alpha = .5) +
  scale_color_viridis(labels = label_percent()) + # This line indicates that the color label is a percent 
  scale_x_continuous (labels = label_dollar()) + # This line labels the x-axis with dollar signs 
  scale_y_continuous (labels = label_dollar()) + # This line labels the y-axis with dollar signs 
  scale_size_area(labels = label_comma(), max_size = 10) + # This indicates that the size label should have a comma
  labs(x = "Median Property Value", y = "Local Per-Pupil Revenue",
       title = "Vermont Local Per-Pupil Revenue by Property Value",
       caption = "Source: Edbuild Data, 2019",
       size = "Enrollment",
       color = "Poverty Rate") +
  theme_bw()

```

## Homework Review: Format Scatter Plots

The final scatter plot has formatted labels, legend, and title.

![](Rplot.png){fig-align="center"}

# Principles of tidy data

## Cleaning your data: One of the most important and under-appreciated stages of good data analysis

-   Most data rarely come to us in a format that is plug-and-play ready for analysis.

-   High-quality data analysis must start with gathering and cleaning relevant data.

-   This starts with ensuring that each data frame of raw data you read into R goes through a process of becoming "tidy" --- once you have tidy data, merging and visualizing data becomes much easier.

-   The process of tidying your data is also helpful for identifying anomalies or outliers in your raw data files.

> **"Tidy data sets are all alike, but every messy data set is messy in its own way."** - Hadley Wickham

## The principles of "tidy data" provide a helpful vision of what good, clean data should look like

Tidy data follows three rules:

1.  Each column is a variable
2.  Each row is an observation
3.  Each cell is a value

![Source: R for Data Science](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/08547/images/r4ds/tidy-1.png){fig-align="center" width="3520"}

## Building tidy datasets will bring consistency to your data across scripts/projects

Tidy datasets also make it easier to work with functions in the `tidyverse`, which is built to work will with "tidy" data

![](https://bookdown.org/michela_cameletti/rcodingfordatascience/images/4_tidyverse-packages.png){fig-align="center"}

## It takes some work to make data tidy, including the use of functions to reshape your data {.smaller}

Data sets can violate the principles of tidy data in several ways. The most common way is for a variable to be embedded across columns. For example, multiple columns can represent data from different years. In this case, a variable (year) is actually represented by column names instead of being captured in its own "year" column.

**Solution:** If your data includes a variable that is embedded across several column names, use the **pivot_longer()** function

![Source: R for Data Science](https://epirhandbook.com/en/images/pivoting/pivot_longer_new.png)

## Live coding example: Using `pivot_longer()` function

Key arguments of the `pivot_longer()` function:

-   `cols`: The names of the columns to pivot using tidy-select
-   `names_to`: The name for the new character column
-   `values_to`: The name for the new values column

```{r echo=TRUE, eval=FALSE}


# clean the special education data -----

section_611_longer <- section_611_raw |>
  # Makes all the letters in a column lowercase
  rename_with(tolower) |>
  select(state, fy2016, fy2017, fy2018, fy2019, fy2020, fy2021, fy2022) |>
  pivot_longer(cols = starts_with("fy"), # The columns start with "fy"
               names_to = "fiscal_year", # the names of the columns will become a value in the "fiscal_year" column
               values_to = "idea_funding") |> # The values in the "fy" columns will be in the new column "idea_funding"
  # Use the gsub to remove the "fy" from the fiscal years so that the values are just the year
  mutate(fiscal_year = as.numeric(gsub("^fy", "", fiscal_year))) |>
  mutate(idea_category = "Part B, Grants to States")


```

## It takes a bit of work to make data tidy, including the use of functions to reshape your data, cont. {.smaller}

A single observation may be spread across multiple rows: This can happen when one column includes multiple variable types within it. And example would be if a dataframe had a "data_type" column that included entries like "n_tested" and "pct_prof".

**Solution:** If your data includes data from a single observation spread across multiple rows, use the **pivot_wider()** function

![Source: R for Data Science](https://bcheggeseth.github.io/112_fall_2022/images/pivot_wider.png)

## Live coding example: Using `pivot_wider()` function {.smaller}

Breaking down the code:

-   `names_from`: The column with values that include multiple variables; will be pivoted into column names.
-   `values_from`: The column with values will be used as cell values after pivoting.

```{r echo=TRUE, eval=FALSE}

# Use pivot_wider with the 2023 graduation rate data 

mn_graduation_fy23_wider <- mn_graduation_fy23_raw |>
  # Makes all the letters in a column lowercase
  rename_with(tolower) |>
  # rename the columns so there isn't a space in-between the words
  rename(district = "district name",
         dist_id = "district number",
         dist_type = "district type",
         group_category = "group category",
         student_group = "student group",
         ending_status = "ending status",
         four_yr_grad_pct = "four year percent") |>
  # Select the columns we want to include in our dataframe for the pivot_wider
  select(district, dist_id, dist_type, group_category, student_group, ending_status, four_yr_grad_pct) |>
  # filter so that we are only looking at students who graduated in four years
  filter(ending_status == "Graduate") |>
  # filter the student demographics because we only want to look at race/ethnicity data
  filter(group_category == "Race/Ethnicity") |>
  # Pivot_wider! 
  pivot_wider(names_from = "student_group", # The names of the columns are from the student group column values
              values_from = "four_yr_grad_pct") 


```

# Techniques to clean messy data

## Cleaning data can be challenging, but it's easier if you take a systematic approach to every raw data file {.smaller}

+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Step               | Goal                                                                                                                                                                   |
+====================+========================================================================================================================================================================+
| Data import        | Ensure your import function is set up to read the data properly                                                                                                        |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column names       | Reformat or manually create column names that are:                                                                                                                     |
|                    |                                                                                                                                                                        |
|                    | -   lowercase                                                                                                                                                          |
|                    |                                                                                                                                                                        |
|                    | -   use underscores instead of spaces                                                                                                                                  |
|                    |                                                                                                                                                                        |
|                    | -   do not begin with a number                                                                                                                                         |
|                    |                                                                                                                                                                        |
|                    | -   follow a consistent format                                                                                                                                         |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Mis-formatted data | Work with functions from base R like `as.numeric()` or from the `tidyverse` packages like `stringr` to clean the data that appear in a different format than you want. |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Missing data       | Identify where in your dataset there are missing variables and/or outliers - this may be more of an iterative process as your explore your data.                       |
+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

## In-class coding example: Minnesota graduation data {.smaller}

We can manipulate the district and school data using the following functions:

-   `tolower()`: Converts characters to lowercase. It's commonly used when dealing with character data, such as strings, to ensure uniformity in text processing and comparisons.
-   `str_to_title()`: Converts strings to title case. Title case means that the first letter of each word is capitalized, while all other letters are in lowercase.
-   `str_replace_all()`: Replaces all occurrences of a pattern within a string with a specified replacement.

```{r echo=TRUE, eval=FALSE}

mn_graduation_school_fy23_clean <- mn_graduation_school_fy23_raw |>
  
  # using "tolower" to make all the values in the column lowercase
  mutate(dst_nam = tolower(dst_nam),
         sch_nam = tolower(sch_nam)) |>
  
  # using "str_to_title" makes the first letter of each word capitalized
  mutate(dst_nam = str_to_title(dst_nam),
         sch_nam = str_to_title(sch_nam)) |>
  
  # using "str_replace_all" turns "Dist" and "Dist."into "District"
  mutate(dst_nam = str_replace_all(dst_nam, c("Dist\\b" = "District", "Dist\\." = "District", "District\\." = "District")))

```

## Your data will rarely come in a single table, so you will need to use join functions to merge the data frames {.smaller}

To join two data frames, they need to share a common column with a unique identifier.

State departments of education typically assign a unique ID number to each school district. **Make sure this is available in your data sets.**

Joining data sets on a name (e.g. school or district) can create problems based on:

-   Capitalization (Mcgregor v. McGregor)
-   Abbreviation (St. Paul v. Saint Paul)
-   Mis-spelling (it happens!)

## Using `left_join()` to merge data sets will help preserve your data {.smaller}

-   Once you have dataframes that share a common ID column, start with your most reliable set of data (typically student count data like ADM or enrollment) and use `left_join()` to attach additional data to that table.
-   This approach will preserve your original data, keeping the number of rows (e.g. districts or schools) consistent as you use `left_join()` to add data by adding more columns.
-   When a record in the "left" dataframe does not have a match in the "right" dataframe, `left_join()` will impute a value of `NA` for all such instances.

![Source: R for Data Science](https://d33wubrfki0l68.cloudfront.net/3abea0b730526c3f053a3838953c35a0ccbe8980/7f29b/diagrams/join-inner.png){fig-align="center"}

## Coding example: How to use left_join()

-   **Example 1:** The common ID columns have the same variable names (dist_id)
-   **Example 2:** The common ID columns have different variable names. The il_test_data_fy23_clean dataframe's variable is dist_id, while the example_2_il_finance_testing_fy23 dataframe's variable name is rcdts. The column names can be different, but the values within the cells must be the same so we can join them.

```{r echo=TRUE, eval=FALSE}

# Use left_join() function to join the the illinoi data -------

# EXAMPLE 1: Join them with the same "dist_id" name 

example_1_il_finance_testing_fy23 <- il_test_data_fy23_clean |>
  left_join(il_finance_fy23_same_id, by = "dist_id")


# EXAMPLE 2: Join them with different column names, but they're the same values
# dist_id comes from because it's in the il_test_data_fy23_clean dataframe 
example_2_il_finance_testing_fy23 <- il_test_data_fy23_clean |>
  left_join(il_finance_fy23_diff_id, by = c("dist_id" = "rcdts"))

```

# Next Class and Homework

## Coming Up

::: columns
::: {.column width="45%"}
**Next Class**

-   The next class will be **Tuesday, June 11 from 11:00 AM - 12:00 PM CT.**

-   We will build on our data cleaning and analysis skills, including how to create unique identifiers
:::

::: {.column width="45%"}
**Homework**

-   In the homework repository, follow the steps to clean, analyze, and visualize data for Vermont

-   **Homework is due by COB on Wednesday, June 5.** This ensures Krista has enough time to go through the homework and provide feedback before the next class.
:::
:::
