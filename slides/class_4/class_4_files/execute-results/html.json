{
  "hash": "8e78020ba60dd3e6f68ecaf4a12cbc5b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Cleaning and Processing in R: Part 1\"\ndate: \"May 14, 2024\"\ncss:\n  - |\n    .smaller h1 {\n      font-size: 0.5em; /* Adjust the font size as needed */\n    }\noutput:\n  quarto::quarto_presentation:\n    format: revealjs\n    theme: \n      logo: images/primary_full-color.png\n      theme: theme/slides.scss # Choose a theme for your presentation (e.g., simple, serif, solarized, etc.)\n    incremental: true # Whether to display content incrementally (one step at a time)\n    self_contained: true # Whether to create a standalone HTML file\n    highlight_style: \"github\" # Syntax highlighting style (e.g., github, monokai, etc.)\n    revealjs:\n      controls: true # Display navigation controls (e.g., arrows, slide number, etc.)\n      progress: true # Display a progress bar\n      slideNumber: true # Display slide numbers\n      center: true # Center the content on each slide\n      chalkboard: true # Enable chalkboard mode for reveal.js\n---\n\n::: {.cell}\n\n:::\n\n\n\n## Agenda\n\n-   Homework review\n-   Principles of tidy data\n-   Techniques to clean messy data\n-   Joining data sets\n-   Homework and next class\n\n# Homework Review\n\n## Homework Review: Format Scatter Plots\n\nFor those who turned in homework, you all did a great job with creating clean data frames and everyone made scatter plots. We were mixed on formatting scatter plots. The code below includes all the key elements of a beautified scatter plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(vt_ed_data, aes (x = mpv, y = local_rev_pp, size = enroll, color = stpovrate)) + \n  geom_point(alpha = .5) +\n  scale_color_viridis(labels = label_percent()) + # This line indicates that the color label is a percent \n  scale_x_continuous (labels = label_dollar()) + # This line labels the x-axis with dollar signs \n  scale_y_continuous (labels = label_dollar()) + # This line labels the y-axis with dollar signs \n  scale_size_area(labels = label_comma(), max_size = 10) + # This indicates that the size label should have a comma\n  labs(x = \"Median Property Value\", y = \"Local Per-Pupil Revenue\",\n       title = \"Vermont Local Per-Pupil Revenue by Property Value\",\n       caption = \"Source: Edbuild Data, 2019\",\n       size = \"Enrollment\",\n       color = \"Poverty Rate\") +\n  theme_bw()\n```\n:::\n\n\n\n## Homework Review: Format Scatter Plots\n\nThe final scatter plot has formatted labels, legend, and title.\n\n![](Rplot.png){fig-align=\"center\"}\n\n## Homework Review: Packages and Pipe Operator {.smaller}\n\nR won't do something unless you tell it to do it. With that in mind, a few of general reminders: \n\n- Load your packages at the top of your script\n- Use the pipe operator (|>) to chain the functions together\n- A function will not work by itself. You need to tell R which current data frame it will manipulate to create the new data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load -----\n\nlibrary(tidyverse)\nlibrary(edbuildr)\nlibrary(scales)\nlibrary(viridis)\n\n# clean the data ------\n\nvt_ed_data <- vt_ed_data |>\n  rename(state = State,\n         district_id = state_id,\n         enroll = ENROLL,\n         sr = SR,\n         lr = LR,\n         srpp_cola = SRPP_cola,\n         lrpp_cola = LRPP_cola,\n         total_enroll = dEnroll_district,\n         sped_count = dIEP,\n         mpv = MPV,\n         mhi = MHI,\n         stpovrate = StPovRate) |>\n  mutate(state_rev_pp = sr/enroll,\n         local_rev_pp = lr/enroll,\n         local_rev_pp_diff = lrpp_cola - local_rev_pp,\n         state_rev_pp_diff = srpp_cola - state_rev_pp,\n         sped_pct = sped_count/enroll) |>\n  filter(enroll > 0) |>\n  select(state, district_id, enroll, state_rev_pp, local_rev_pp, srpp_cola, lrpp_cola,\n         local_rev_pp_diff, state_rev_pp_diff, sped_pct, mpv, mhi, stpovrate)\n```\n:::\n\n# Principles of tidy data\n\n## Cleaning your data: One of the most important and under-appreciated stages of good data analysis\n\n-   Most data rarely come to us in a format that is plug-and-play ready for analysis.\n\n-   High-quality data analysis must start with gathering and cleaning relevant data.\n\n-   This starts with ensuring that each data frame of raw data you read into R goes through a process of becoming \"tidy\" --- once you have tidy data, merging and visualizing data becomes much easier.\n\n-   The process of tidying your data is also helpful for identifying anomalies or outliers in your raw data files.\n\n> **\"Tidy data sets are all alike, but every messy data set is messy in its own way.\"** - Hadley Wickham\n\n## The principles of \"tidy data\" provide a helpful vision of what good, clean data should look like\n\nTidy data follows three rules:\n\n1.  Each column is a variable\n2.  Each row is an observation\n3.  Each cell is a value\n\n![Source: R for Data Science](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/08547/images/r4ds/tidy-1.png){fig-align=\"center\" width=\"3520\"}\n\n## Building tidy data sets will bring consistency to your data across scripts/projects {.smaller}\n\nTidy data sets also make it easier to work with functions in the `tidyverse`, which is built to work will with \"tidy\" data. The package we will focus on today is the `tidyr` package, which is designed to help you tidy up your messy data into a structured, organized format that is conducive to analysis and visualization. It offers a suite of functions for reshaping and transforming your data, making it easier to work with in downstream analyses.\n\n![](https://bookdown.org/michela_cameletti/rcodingfordatascience/images/4_tidyverse-packages.png){fig-align=\"center\"}\n\n## It takes some work to make data tidy, including the use of functions to reshape your data {.smaller}\n\nData sets can violate the principles of tidy data in several ways. The most common way is for a variable to be embedded across columns. For example, multiple columns can represent data from different years. In this case, a variable (year) is actually represented by column names instead of being captured in its own \"year\" column.\n\n**Solution:** If your data includes a variable that is embedded across several column names, use the **pivot_longer()** function\n\n![Source: R for Data Science](https://epirhandbook.com/en/images/pivoting/pivot_longer_new.png)\n\n## Live coding example: Using `pivot_longer()` function\n\nKey arguments of the `pivot_longer()` function:\n\n-   `cols`: The names of the columns to pivot using tidy-select\n-   `names_to`: The name for the new character column\n-   `values_to`: The name for the new values column\n\n::: {.cell}\n\n```{.r .cell-code}\n# clean the special education data -----\n\nsection_611_longer <- section_611_raw |>\n  # Makes all the letters in a column lowercase\n  rename_with(tolower) |>\n  select(state, fy2016, fy2017, fy2018, fy2019, fy2020, fy2021, fy2022) |>\n  pivot_longer(cols = starts_with(\"fy\"), # The columns start with \"fy\"\n               names_to = \"fiscal_year\", # the names of the columns will become a value in the \"fiscal_year\" column\n               values_to = \"idea_funding\") |> # The values in the \"fy\" columns will be in the new column \"idea_funding\"\n  # Use the gsub to remove the \"fy\" from the fiscal years so that the values are just the year\n  mutate(fiscal_year = as.numeric(gsub(\"^fy\", \"\", fiscal_year))) |>\n  mutate(idea_category = \"Part B, Grants to States\")\n```\n:::\n\n\n\n## It takes a bit of work to make data tidy, including the use of functions to reshape your data, cont. {.smaller}\n\nA single observation may be spread across multiple rows: This can happen when one column includes multiple variable types within it. And example would be if a dataframe had a \"data_type\" column that included entries like \"n_tested\" and \"pct_prof\".\n\n**Solution:** If your data includes data from a single observation spread across multiple rows, use the **pivot_wider()** function\n\n![Source: R for Data Science](https://bcheggeseth.github.io/112_fall_2022/images/pivot_wider.png)\n\n## Live coding example: Using `pivot_wider()` function {.smaller}\n\nBreaking down the code:\n\n-   `names_from`: The column with values that include multiple variables; will be pivoted into column names.\n-   `values_from`: The column with values will be used as cell values after pivoting.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use pivot_wider with the 2023 graduation rate data \n\nmn_graduation_fy23_wider <- mn_graduation_fy23_raw |>\n  # Makes all the letters in a column lowercase\n  rename_with(tolower) |>\n  # rename the columns so there isn't a space in-between the words\n  rename(district = \"district name\",\n         dist_id = \"district number\",\n         dist_type = \"district type\",\n         group_category = \"group category\",\n         student_group = \"student group\",\n         ending_status = \"ending status\",\n         four_yr_grad_pct = \"four year percent\") |>\n  # Select the columns we want to include in our dataframe for the pivot_wider\n  select(district, dist_id, dist_type, group_category, student_group, ending_status, four_yr_grad_pct) |>\n  # filter so that we are only looking at students who graduated in four years\n  filter(ending_status == \"Graduate\") |>\n  # filter the student demographics because we only want to look at race/ethnicity data\n  filter(group_category == \"Race/Ethnicity\") |>\n  # Pivot_wider! \n  pivot_wider(names_from = \"student_group\", # The names of the columns are from the student group column values\n              values_from = \"four_yr_grad_pct\") \n```\n:::\n\n\n\n# Techniques to clean messy data\n\n## Cleaning data can be challenging, but it's easier if you take a systematic approach to every raw data file {.smaller}\n\n+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Step               | Goal                                                                                                                                                                   |\n+====================+========================================================================================================================================================================+\n| Data import        | Ensure your import function is set up to read the data properly                                                                                                        |\n+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Column names       | Reformat or manually create column names that are:                                                                                                                     |\n|                    |                                                                                                                                                                        |\n|                    | -   lowercase                                                                                                                                                          |\n|                    |                                                                                                                                                                        |\n|                    | -   use underscores instead of spaces                                                                                                                                  |\n|                    |                                                                                                                                                                        |\n|                    | -   do not begin with a number                                                                                                                                         |\n|                    |                                                                                                                                                                        |\n|                    | -   follow a consistent format                                                                                                                                         |\n+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Mis-formatted data | Work with functions from base R like `as.numeric()` or from the `tidyverse` packages like `stringr` to clean the data that appear in a different format than you want. |\n+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Missing data       | Identify where in your dataset there are missing variables and/or outliers - this may be more of an iterative process as your explore your data.                       |\n+--------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n## In-class coding example: Minnesota graduation data {.smaller}\n\nWe can manipulate the district and school data using the following functions:\n\n-   `tolower()`: Converts characters to lowercase. It's commonly used when dealing with character data, such as strings, to ensure uniformity in text processing and comparisons.\n-   `str_to_title()`: Converts strings to title case. Title case means that the first letter of each word is capitalized, while all other letters are in lowercase.\n-   `str_replace_all()`: Replaces all occurrences of a pattern within a string with a specified replacement.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmn_graduation_school_fy23_clean <- mn_graduation_school_fy23_raw |>\n  \n  # using \"tolower\" to make all the values in the column lowercase\n  mutate(dst_nam = tolower(dst_nam),\n         sch_nam = tolower(sch_nam)) |>\n  \n  # using \"str_to_title\" makes the first letter of each word capitalized\n  mutate(dst_nam = str_to_title(dst_nam),\n         sch_nam = str_to_title(sch_nam)) |>\n  \n  # using \"str_replace_all\" turns \"Dist\" and \"Dist.\"into \"District\"\n  mutate(dst_nam = str_replace_all(dst_nam, c(\"Dist\\\\b\" = \"District\", \"Dist\\\\.\" = \"District\", \"District\\\\.\" = \"District\")))\n```\n:::\n\n\n\n## Your data will rarely come in a single table, so you will need to use join functions to merge the data frames {.smaller}\n\nTo join two data frames, they need to share a common column with a unique identifier.\n\nState departments of education typically assign a unique ID number to each school district. **Make sure this is available in your data sets.**\n\nJoining data sets on a name (e.g. school or district) can create problems based on:\n\n-   Capitalization (Mcgregor v. McGregor)\n-   Abbreviation (St. Paul v. Saint Paul)\n-   Mis-spelling (it happens!)\n\n## Using `left_join()` to merge data sets will help preserve your data {.smaller}\n\n-   Once you have dataframes that share a common ID column, start with your most reliable set of data (typically student count data like ADM or enrollment) and use `left_join()` to attach additional data to that table.\n-   This approach will preserve your original data, keeping the number of rows (e.g. districts or schools) consistent as you use `left_join()` to add data by adding more columns.\n-   When a record in the \"left\" dataframe does not have a match in the \"right\" dataframe, `left_join()` will impute a value of `NA` for all such instances.\n\n![Source: R for Data Science](https://d33wubrfki0l68.cloudfront.net/3abea0b730526c3f053a3838953c35a0ccbe8980/7f29b/diagrams/join-inner.png){fig-align=\"center\"}\n\n## Coding example: How to use left_join()\n\n-   **Example 1:** The common ID columns have the same variable names (dist_id)\n-   **Example 2:** The common ID columns have different variable names. The il_test_data_fy23_clean dataframe's variable is dist_id, while the example_2_il_finance_testing_fy23 dataframe's variable name is rcdts. The column names can be different, but the values within the cells must be the same so we can join them.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use left_join() function to join the the illinoi data -------\n\n# EXAMPLE 1: Join them with the same \"dist_id\" name \n\nexample_1_il_finance_testing_fy23 <- il_test_data_fy23_clean |>\n  left_join(il_finance_fy23_same_id, by = \"dist_id\")\n\n\n# EXAMPLE 2: Join them with different column names, but they're the same values\n# dist_id comes from because it's in the il_test_data_fy23_clean dataframe \nexample_2_il_finance_testing_fy23 <- il_test_data_fy23_clean |>\n  left_join(il_finance_fy23_diff_id, by = c(\"dist_id\" = \"rcdts\"))\n```\n:::\n\n\n\n# Next Class and Homework\n\n## Coming Up\n\n::: columns\n::: {.column width=\"45%\"}\n**Next Class**\n\n-   The next class will be **Tuesday, June 11 from 11:00 AM - 12:00 PM CT.**\n\n-   We will build on our data cleaning and analysis skills, including how to create unique identifiers\n:::\n\n::: {.column width=\"45%\"}\n**Homework**\n\n-   In the homework repository, follow the steps to clean, analyze, and visualize data for Vermont\n\n-   **Homework is due by COB on Wednesday, June 5.** This ensures Krista has enough time to go through the homework and provide feedback before the next class.\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}