{
  "hash": "79b3412f3380923544f59c1dd31bcf89",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basic Data Analysis in R (tidyverse)\"\ndate: \"April 9, 2024\"\nformat: \n  revealjs:\n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: false\n---\n\n::: {.cell}\n\n:::\n\n\n## Agenda\n\n# Introduction to the `tidyverse`\n\n## R is a functional programming language - most of what you will do in R is work with functions \n\nA function: \n\n- Takes a specific input\n- Performs an operation \n- Returns in output \n\nFunctions are helpful tools to reduce repetition in typing and improves your codeâ€™s consistency, reliability and readability.\n\n## The tidyverse is a powerful collection of R packages that work well together {.smaller .scrollable}\n\n::: columns\n::: {.column width=\"50%\"}\n::: columns\n-   The most popular packages in the R community are past of what is called the \"tidyverse,\" which includes packages like `ggplot2`, `tidyr`, `stringr`, `tibble`, and `purrr`.\n\n-   `Tidyverse` packages are built to work together. Every `tidyverse` package contains functions that can manipulate or visualize data that lives in data frames.\n\n-   Most functions in the `tidyverse` require a data frame (R's version of a table) as the first argument in each function. The functions can be \"chained\" together with other functions.\n\n-   We will explore the `tidyverse` by looking at EdBuild's FY2019 education data compiled from the F33 survey, SAIPE, EDGE, and CCD. The `edbuildr` package provides access to clean district data on funding, student demographics, and wealth.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](https://education.rstudio.com/blog/2020/07/teaching-the-tidyverse-in-2020-part-1-getting-started/img/tidyverse-packages.png)\n:::\n:::\n\n## To read EdBuild's finance data into our working environment we will use the masterpull() function {.smaller .scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(edbuildr)\n\nedbuild_fin_fy19 <- masterpull(data_year = 2019, data_type = \"fin\")\n```\n:::\n\n\nThis code will load the `edbuildr` package and then download a clean dataframe from EdBuild's server and store it as a variable called `edbuild_fin_fy19`.\n\nThere are three options for the `data_type` argument:\n\n-   \"geo\": only includes districts with geographic boundaries (no charter/special school districts) that meet EdBuild's criteria for fiscal analysis\n-   \"fin\": includes all districts that meet EdBuild's criteria for fiscal analysis\n-   \"full\": includes all districts -- TO BE USED WITH CAUTION\n\n## The dplyr() package provides many functions to manipulate your data frames' columns and rows {.smaller .scrollable}\n\nThe functions you'll most frequently use from the dplyr packages are:\n\n-   `select()`: names columns to keep from a data frame\n-   `rename()`: name columns to keep from a data frame\n-   `filter()`: remove rows that do not meet the condition in the logical statement from the output\n-   `mutate()`: create a new column that will be added to the end of your data frame.\n\n## A special operator called a \"pipe\" will allow you to chain several functions together {.smaller .scrollable}\n\n-   In R, the pipe operator is a vertical bar and a greater-than sign: `|>`\n\n-   Instead of \"nesting\" the results of one function inside of another, the pipe allows you to execute the same command in a more human-readable order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# example of \"nesting\" the result of one function inside another function. \ndf1 <- select(filter(raw_df, enroll > 10000), dist_id, dist_name, enroll, rev_pp)\n\n# example of using the \"pipe\" to produce the same as above \n# read the pipe as \"and then\" to understand what's being done to your data\ndf2 <- raw_df |> # start with raw_df AND THEN DO THIS \n  filter(enroll > 10000) |> # filter for enrollment > 10,000 AND THEN DO THIS \n  select(dist_id, dist_name, enroll, rev_pp) # select only these columns\n```\n:::\n\n\n# Iterative exploratory analysis\n\n## LIVE CODING EXAMPLE: exploring_the_tidyverse.R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load ----------\n\noptions(scipen = 999)\n\nlibrary(tidyverse)\nlibrary(edbuildr)\n\n# Krista likes to denote which spreadsheet is raw for transparency \ndist_fy19_raw <- masterpull(data_type = \"geo\")\n\n# filter Minnesota data and clean -----\n\n# filter, rename, and mutate data for Minnesota \nmn_ed_data <- dist_fy19_raw |>\n  filter(State == \"Minnesota\") |>\n  rename(district = NAME,\n         county = County,\n         enroll = ENROLL, \n         total_local_rev = LR,\n         total_state_rev = SR,\n         total_state_local_rev = SLR, \n         urbanicity = dUrbanicity,\n         operational_schools = dOperational_schools, \n         district_type = dType, \n         white_enroll = dWhite, \n         sped_enroll = dIEP, \n         ell_enroll = dLEP, \n         econ_dis_enroll = StPov,\n         bipoc_pct = pctNonwhite, \n         pov_pct = StPovRate,\n         median_house_income = MHI, \n         median_prop_value = MPV) |>\n  mutate(bipoc_enroll = enroll - white_enroll,\n         ell_pct = ell_enroll/enroll, \n         sped_pct = sped_enroll/enroll, \n         local_rev_pp = total_local_rev/enroll,\n         state_rev_pp = total_state_rev/enroll,\n         local_state_rev_pp = total_state_local_rev/enroll) |>\n  select(district, county, enroll, local_rev_pp, state_rev_pp, local_state_rev_pp, \n         total_local_rev, total_state_rev, total_state_local_rev, urbanicity, \n         operational_schools, district_type, pov_pct, bipoc_pct, ell_pct, sped_pct)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}