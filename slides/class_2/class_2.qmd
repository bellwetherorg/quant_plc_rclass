# ---
# title: "Basic data analysis (tidyverse)"
# date: "April 9, 2023"
# format: 
#   revealjs:
#     chalkboard: true
# execute:
#   freeze: auto
#   echo: false
# ---


---
title: "Basic data analysis (tidyverse)"
date: "April 9, 2023"
output:
  html_document:
    revealjs::revealjs_presentation:
      chalkboard: true
runtime:
  shiny: false
---

```{r}
#| output: false


library(tidyverse)
library(countdown)
library(tigris)
library(sf)
library(scales)


bw_primary <- c("#6D1E4A", # 1 plum
                "#007786", # 2 teal
                "#0D525A", # 3 dark green
                "#212B46", # 4 navy
                "#5A6675", # 5 grey
                "#F0DEC1") # 6 cream

bw_secondary <- c("#FFC762", # 1 yellow
                  "#FFB653", # 2 orange
                  "#BEC6CE", # 3 light grey
                  "#2E1A4A", # 4 deep purple
                  "#7EA2D1", # 5 soft blue
                  "#CAD3FB", # 6 lavender
                  "#9CD4EA", # 7 sky
                  "#FFA497") # 8 peach


```

## Agenda

- Creating a token and cloning a GitHub repository in RStudio (5 minutes)
- Introduction to the `tidyverse` (10 minutes)
- Live coding demonstration (10 minutes)
- Partner work cleaning a data set (30 minutes)
- Next class and homework (5 minutes)

# Introduction to the `tidyverse`

## R is a functional programming language - most of what you will do in R is work with functions 

A function: 

- Takes a specific input
- Performs an operation 
- Returns in output 

Functions are helpful tools to reduce repetition in typing and improves your codeâ€™s consistency, reliability and readability.

## The tidyverse is a powerful collection of R packages that work well together {.smaller .scrollable}

::: columns
::: {.column width="50%"}
::: columns
-   The most popular packages in the R community are past of what is called the "tidyverse," which includes packages like `ggplot2`, `tidyr`, `stringr`, `tibble`, and `purrr`.

-   `Tidyverse` packages are built to work together. Every `tidyverse` package contains functions that can manipulate or visualize data that lives in data frames.

-   Most functions in the `tidyverse` require a data frame (R's version of a table) as the first argument in each function. The functions can be "chained" together with other functions.

-   We will explore the `tidyverse` by looking at EdBuild's FY2019 education data compiled from the F33 survey, SAIPE, EDGE, and CCD. The `edbuildr` package provides access to clean district data on funding, student demographics, and wealth.
:::
:::

::: {.column width="50%"}
![](https://education.rstudio.com/blog/2020/07/teaching-the-tidyverse-in-2020-part-1-getting-started/img/tidyverse-packages.png)
:::
:::

## To read EdBuild's finance data into our working environment we will use the masterpull() function {.smaller .scrollable}

```{r}
#| echo: true
#| eval: false

library(edbuildr)

edbuild_fin_fy19 <- masterpull(data_year = 2019, data_type = "fin")
```

This code will load the `edbuildr` package and then download a clean dataframe from EdBuild's server and store it as a variable called `edbuild_fin_fy19`.

There are three options for the `data_type` argument:

-   "geo": only includes districts with geographic boundaries (no charter/special school districts) that meet EdBuild's criteria for fiscal analysis
-   "fin": includes all districts that meet EdBuild's criteria for fiscal analysis
-   "full": includes all districts -- TO BE USED WITH CAUTION

## The dplyr() package provides many functions to manipulate your data frames' columns and rows {.smaller .scrollable}

The functions you'll most frequently use from the dplyr packages are:

-   `select()`: names columns to keep from a data frame
-   `rename()`: name columns to keep from a data frame
-   `filter()`: remove rows that do not meet the condition in the logical statement from the output
-   `mutate()`: create a new column that will be added to the end of your data frame.

## A special operator called a "pipe" will allow you to chain several functions together {.smaller .scrollable}

-   In R, the pipe operator is a vertical bar and a greater-than sign: `|>`

-   Instead of "nesting" the results of one function inside of another, the pipe allows you to execute the same command in a more human-readable order.

```{r}
#| echo: true
#| eval: false
#| 
# example of "nesting" the result of one function inside another function. 
df1 <- select(filter(raw_df, enroll > 10000), dist_id, dist_name, enroll, rev_pp)

# example of using the "pipe" to produce the same as above 
# read the pipe as "and then" to understand what's being done to your data
df2 <- raw_df |> # start with raw_df AND THEN DO THIS 
  filter(enroll > 10000) |> # filter for enrollment > 10,000 AND THEN DO THIS 
  select(dist_id, dist_name, enroll, rev_pp) # select only these columns


```

# Iterative exploratory analysis

## LIVE CODING EXAMPLE: exploring_the_tidyverse.R

```{r}
#| echo: true

# load ----------

options(scipen = 999)

library(tidyverse)
library(edbuildr)

# Krista likes to denote which spreadsheet is raw for transparency 
dist_fy19_raw <- masterpull(data_type = "geo")

# Use the "filter" function to get the Minnesota data -----------

mn_ed_data <- dist_fy19_raw |>
  filter(State == "Minnesota") 

# Use "rename" function to change names of Minnesota variables --------

mn_ed_data <- mn_ed_data |>
  rename(district = NAME,
         county = County,
         enroll = ENROLL, 
         total_local_rev = LR) 

# Use "mutate" function to create a local revenue pp variable -----
mn_ed_data <- mn_ed_data |>
  mutate(local_rev_pp = total_local_rev/enroll) 

# Use "select" function to choose the variables you want in your data frame ---------

mn_ed_data <- mn_ed_data |>
  select(district, county, enroll, total_local_rev, local_rev_pp)

# Filter the districts that do not have enrollment ------

mn_ed_data_clean <- mn_ed_data |>
  filter(enroll > 0)


```

# Partner Work

## In pairs, you will work together to create a clean data frame for a state. 

- **Julia and Kelly:** Illinois
- **Indira and Priyanka:** Tennessee
- **Marisa and Brian:** Maryland 
- **Ebony and Libby:** Virginia 
- **Sophie and Nora:** Alabama 

Krista and Alex will be circulating to the different pairs to answer questions and
offer support. 

# Next Class and Homework 

## Coming Up {.smaller .scrollable}

::: columns
::: {.column width="45%"}
**Next Class**

-   The next class will be **Tuesday, April 23 from 11:00 AM - 12:00 PM CT.**

-   We will do a deep dive into the `ggplot2` and do basic data visualization in R. 

-   We will use our clean data frames that we made today to do the data visualization. 
:::

::: {.column width="45%"}
**Homework** 

-   Finish cleaning and creating the data frame for your assigned state. 

-   In the "homework" folder you will find a raw data frame and a script with instructions. Please complete the homework and push updates to the repository by 11:00 AM CT on Monday, April 21. Krista will look it over and provide comments. 

-   **Optional homework:** Find a raw data frame that you want to clean. Add it to the "optional_hw" folder" and use the four functions we learned about today to create a clean data frame. 
:::
:::









