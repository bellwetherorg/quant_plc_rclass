{
  "hash": "28f885207350ce1e1d4995d3d64b3dca",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basic data visualization using `ggplot2`\"\ndate: \"April 23, 2024\"\ncss:\n  - |\n    .smaller h1 {\n      font-size: 0.5em; /* Adjust the font size as needed */\n    }\noutput:\n  quarto::quarto_presentation:\n    format: revealjs\n    theme: \"simple\" # Choose a theme for your presentation (e.g., simple, serif, solarized, etc.)\n    incremental: true # Whether to display content incrementally (one step at a time)\n    self_contained: true # Whether to create a standalone HTML file\n    highlight_style: \"github\" # Syntax highlighting style (e.g., github, monokai, etc.)\n    revealjs:\n      controls: true # Display navigation controls (e.g., arrows, slide number, etc.)\n      progress: true # Display a progress bar\n      slideNumber: true # Display slide numbers\n      center: true # Center the content on each slide\n      chalkboard: true # Enable chalkboard mode for reveal.js\n---\n\n::: {.cell}\n\n:::\n\n\n\n## Agenda\n\n-   Visualizing local education revenue data with `ggplot2`\n-   Cloning a GitHub repository in RStudio\n-   Homework and next class\n\n# Visualizing local education revenue data with `ggplot2`\n\n## The `ggplot2` package is the most widely-used data visualization approach in the R ecosystem.\n\n-   Plots in `ggplot2` are created by starting with your data, then building up layers\n-   Once your specify your data, you can add layers of \"geoms\" to create your plot\n-   Today we will use `geom_point()`\n\n# Using `ggplot2` is like baking! {.smaller}\n\n![](Screenshot%202024-04-10%20at%205.06.00%20PM.png){fig-align=\"center\"}\n\n# Iterating your way to beauty with `ggplot2` using Minnesota data\n\n## Step 1: Create a basic plot {.smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# first minnesota plot \nggplot(mn_ed_data, aes(x = pov_pct, y = local_rev_pp)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n## Step 2: Address missing values {.smaller}\n\nWe need to figure out what's going on with our missing values before we go any further!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# investigate missing values \nmn_na_dist <- mn_ed_data |>\n  # The \"filter\" function is used to select rows. the \"is.na\" is telling R to choose the following rows that have an NA. \n  filter(is.na(enroll)) \n\n# The data frame will automatically open in a new tab \nview(mn_na_dist)\n```\n:::\n\n\n\nThe missing data makes sense. All eight of the rows don't have any available data.\n\n## Step 3: Clean up formatting of the scatter plot elements (1/5) {.smaller}\n\nNow that we understand our missing data, we can create an updated dataframe and re-plot our newly cleaned data.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# We should also check to see the districts that have no enrollment \n\nmn_no_enroll <- mn_ed_data |> \n  filter(enroll == 0)\n\n\n# Drop the districts that have no enrollment or their enrollment is NA \nmn_ed_clean <- mn_ed_data |>\n  filter(enroll > 0)\n\n# first minnesota plot w/ clean data\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n## Step 3: Clean up formatting of chart elements (2/5) {.smaller}\n\nWe see some overlap in the points. Reducing the opacity of the points can be accomplished by setting the `alpha` parameter in geom_point() to a value less than 1. Setting it to .5 will make data points 50% translucent.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reduce opacity of points\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp)) +\n  geom_point(alpha = .5)\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n## Step 3: Clean up formatting of chart elements (3/5) {.smaller}\n\nLet's take care of some formatting issues.\n\nOur axes don't look great - the decimals ought to be percentages and the vertical axis represents dollars. Here, the `scales` package provides some help.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# format axes \nlibrary(scales)\n\n# format the x and y axes\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp)) +\n  geom_point(alpha = .5) + \n# make sure you have the `scales` package loaded!\n  scale_x_continuous(labels = label_percent()) +\n  scale_y_continuous(labels = label_dollar())\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n## Step 3: Clean up formatting of chart elements (4/5) {.smaller .scrollable}\n\nNext, we should add some labels to our axes that make sense, along with a title for our plot and a caption that details our data sources.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# add data labels \nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp)) +\n  geom_point(alpha = .5) + \n# make sure you have the `scales` package loaded!\n  scale_x_continuous(labels = label_percent()) +\n  scale_y_continuous(labels = label_dollar()) + \n    labs(x = \"Student Poverty Rate\", y = \"Local Per-Pupil Revenue\",\n       title = \"Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts\",\n       caption = \"Source: Edbuild Data, 2019\") \n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n## Step 3: Clean up formatting of chart elements (5/5) {.smaller .scrollable}\n\nThemes can be used to change the appearance of elements in your plot. There are many stock options, but I prefer `theme_bw()` for its clean appearance and helpful and unobtrusive grid lines.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# change theme\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp)) +\n  geom_point(alpha = .5) + \n  scale_x_continuous(labels = label_percent()) +\n  scale_y_continuous(labels = label_dollar()) + \n    labs(x = \"Student Poverty Rate\", y = \"Local Per-Pupil Revenue\",\n       title = \"Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts\",\n       caption = \"Source: Edbuild Data, 2019\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n\n## Step 4: Add a new layer of data {.smaller .scrollable}\n\nNow that we have a decent-looking graph, let's add in a new data element to vary point size by enrollment.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# add size element \nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll)) +\n  geom_point(alpha = .5) + \n  scale_x_continuous(labels = label_percent()) +\n  scale_y_continuous(labels = label_dollar()) +\n    labs(x = \"Student Poverty Rate\", y = \"Local Per-Pupil Revenue\",\n       title = \"Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts\",\n       caption = \"Source: Edbuild Data, 2019\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n\n## Step 5: Tidy up formatting (1/2) {.smaller .scrollable}\n\nAdding a new variable for size creates a legend. We need to tidy the legend's labels and the title.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# clean up the legend\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll)) +\n  geom_point(alpha = .5) + \n  scale_x_continuous(labels = label_percent()) +\n  scale_y_continuous(labels = label_dollar()) + \n  # change legend label formatting\n  scale_size(labels = comma) +\n    labs(x = \"Student Poverty Rate\", y = \"Local Per-Pupil Revenue\",\n       title = \"Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts\",\n       caption = \"Source: Edbuild Data, 2019\",\n       # add nice label for size element\n  size = \"Enrollment\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n\n## Step 5: Tidy up formatting (2/2) {.smaller .scrollable}\n\nWe can also adjust some paramenters to allow for more visual contrast in size. By default, `ggplot2` will adjust points' radii based on the size variable. Using area is a more visually honest way to represent the data, so let's make that change.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# create more contrast in size\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll)) +\n  geom_point(alpha = .5) + \n  scale_x_continuous(labels = label_percent()) +\n  scale_y_continuous(labels = label_dollar()) + \n  # change size scaling to vary by area, not radius + change max size\n  scale_size_area(labels = label_comma(), max_size = 10) + \n  labs(x = \"Student Poverty Rate\", y = \"Local Per-Pupil Revenue\",\n       title = \"Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts\",\n       caption = \"Source: Edbuild Data, 2019\",\n       # add nice label for size element\n       size = \"Enrollment\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n## Step 6: Repeat steps 4-5 as needed (1/5) {.smaller .scrollable}\n\nAdding color can be helpful. Let's add color based on urbanicity.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# add in color based on urbanicity\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll,\n                        color = urbanicity)) +\n  geom_point(alpha = .5) + \n  scale_x_continuous(labels = percent_format(accuracy = 1)) +\n  scale_size_area(labels = comma, max_size = 10) + \n  labs(x = \"Student Poverty Rate\", y = \"Local Per-Pupil Revenue\",\n       title = \"Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts\",\n       caption = \"Source: Edbuild Data, 2019\",\n       size = \"Enrollment\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n\n## Step 6: Repeat steps 4-5 as needed (2/5) {.smaller .scrollable}\n\nThat doesn't look great. Let's use some more functions from the `tidyverse` to clean up the data a little more to reduce 11 urbanicity levels to four, then tidy up the legend label.\n\n-   `as.factor`: Function that is used to convert a vector ior a column in a dataframe into a factor. Factors are used to represent categorical data where the possible values of the variable are limited.\n-   `fct_collapse`: Part of the `forcats` package and is a function that is used to collapse or group levels of a factor into new levels. This can be useful for combining similar categories or reducing the number of levels in a factor.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# clean up the unicorn vomit\nmn_ed_clean <- mn_ed_clean |>\n  mutate(urbanicity = fct_collapse(as.factor(urbanicity),\n                                   City = c(\"11-City: Large\", \n                                            \"12-City: Mid-size\",\n                                            \"13-City: Small\"),\n                                   Suburb = c(\"21-Suburb: Large\",\n                                              \"22-Suburb: Mid-size\",\n                                             \"23-Suburb: Small\"),\n                                   Town = c(\"31-Town: Fringe\",\n                                            \"32-Town: Distant\",\n                                            \"33-Town: Remote\"),\n                                   Rural = c(\"41-Rural: Fringe\",\n                                             \"42-Rural: Distant\",\n                                             \"43-Rural: Remote\")))\n\n\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll,\n                        color = urbanicity)) +\n  geom_point(alpha = .5) + \n  scale_x_continuous(labels = label_percent()) +\n  scale_y_continuous(labels = label_dollar()) +\n  scale_size_area(labels = label_comma(), max_size = 10) +  \n  labs(x = \"Student Poverty Rate\", y = \"Local Per-Pupil Revenue\",\n       title = \"Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts\",\n       caption = \"Source: Edbuild Data, 2019\",\n       size = \"Enrollment\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n\n## Step 6: Repeat steps 4-5 as needed (3/5) {.smaller .scrollable}\n\nWe can and should adjust the colors used. R recognizes some pretty funky color names, which can be found in this helpful cheat sheet.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# adjust colors manually\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll,\n                        color = urbanicity)) +\n  geom_point(alpha = .5) + \n    # create manual color palette\n  # color names pulled from a pdf y'all should bookmark\n  # http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf\n  scale_color_manual(values = c(\"tomato3\", \"steelblue2\",\n                                \"seagreen3\", \"orchid1\")) +\n  scale_x_continuous(labels = label_percent()) +\n  scale_y_continuous(labels = label_dollar()) +\n  scale_size_area(labels = label_comma(), max_size = 10) + \n  labs(x = \"Student Poverty Rate\", y = \"Local Per-Pupil Revenue\",\n       title = \"Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts\",\n       caption = \"Source: Edbuild Data, 2019\",\n       size = \"Enrollment\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n\n## Step 6: Repeat steps 4-5 as needed (4/5) {.smaller .scrollable}\n\nWe should strive to make our analyses as accessible as possible. The `viridis` package includes some color palettes that are friendly for folks with color blindness, which affects 5-10 percent of the US population.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# use colors better for visual impairments\nlibrary(viridis)\n# adjust colors manually\n\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll,\n                        color = urbanicity)) +\n  geom_point(alpha = .5) + \n  # use a colorblind-friendly palette\n  scale_color_viridis_d() +\n  scale_x_continuous(labels = label_percent()) +\n  scale_y_continuous(labels = label_dollar()) +\n  scale_size_area(labels = label_comma(), max_size = 10) + \n  labs(x = \"Student Poverty Rate\", y = \"Local Per-Pupil Revenue\",\n       title = \"Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts\",\n       caption = \"Source: Edbuild Data, 2019\",\n       size = \"Enrollment\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n\n## Step 6: Repeat steps 4-5 as needed (5/5) {.smaller .scrollable}\n\nLet's adjust the range of colors used to exclude that hard-to-see yellow.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# that yellow is hard to see - let's adjust the range\nggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll,\n                        color = urbanicity)) +\n  geom_point(alpha = .5) + \n  # adjust color range\n  scale_color_viridis_d(end = .8) +\n  scale_x_continuous(labels = label_percent()) +\n  scale_y_continuous(labels = label_dollar()) +\n  scale_size_area(labels = label_comma(), max_size = 10) + \n  labs(x = \"Student Poverty Rate\", y = \"Local Per-Pupil Revenue\",\n       title = \"Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts\",\n       caption = \"Source: Edbuild Data, 2019\",\n       size = \"Enrollment\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class_3_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n\n# Cloning a GitHub repository in RStudio\n\n## You will receive an email with an invitation to join the GitHub organization for this training {.smaller}\n\n![](Screenshot%202024-04-22%20at%201.37.25%20PM.png){fig-align=\"center\"}\n\n## Once you click the \"View Invitation\" button, you will be directed to join the organization {.smaller}\n\n![](Screenshot%202024-04-22%20at%201.47.33%20PM.png){fig-align=\"center\"}\n\n## Bookmark the organization page\n\nYour homework assignments will show up here as repositories\n\n![](Screenshot%202024-04-22%20at%201.47.46%20PM.png){fig-align=\"center\"}\n\n## To start an assignment, navigate to the repository and copy the HTTPS link that appears when you click the \"Code\" button {.smaller}\n\n![](Screenshot%202024-04-22%20at%201.49.26%20PM.png){fig-align=\"center\"}\n\n## Next, you'll open RStudio and create a new project, selecting the \"Version control\" and \"Git\" options {.smaller}\n\n![](git_process/04-new-proj.png){fig-align=\"center\"}\n\n## Next, you'll open RStudio and create a new project, selecting the \"Version Control\" and \"Git\" options {.smaller}\n\n![](git_process/05-git-proj.png){fig-align=\"center\"}\n\n## Be sure to select a folder where you want to have your homework files saved before you click \"Open\" {.smaller}\n\n![](git_process/06-select-path.png){fig-align=\"center\"}\n\n## You're now ready to start working on your homework!\n\nStart by opening the README.md file\n\n![](Screenshot 2024-04-22 at 3.30.25 PM.png){fig-align=\"center\"}\n\n## The README.md file is a text file that will include instructions for your assignment\n\nUsing the \"Visual\" option will make it easier to read\n\n![](Screenshot 2024-04-22 at 3.30.35 PM.png){fig-align=\"center\"}\n\n## The README.md file is a text file that will include instructions for your assignment\n\nUsing the \"Visual\" option will make it easier to read\n\n![](Screenshot 2024-04-22 at 3.30.43 PM.png){fig-align=\"center\"}\n\n## Once you've completed your assignment, you'll want to \"stage\" your changes and then start the \"commit\" process {.smaller}\n\n![](git_process/12-gh-push.png){fig-align=\"center\"}\n\n# Next Class and Homework\n\n## Coming Up {.smaller}\n\n::: columns\n::: {.column width=\"45%\"}\n**Next Class**\n\n-   The next class will be **Tuesday, May 14 from 11:00 AM - 12:00 PM CT.**\n\n-   We will build on our data cleaning and analysis skills, including how to join multiple data sets\n:::\n\n::: {.column width=\"45%\"}\n**Homework**\n\n-   In the homework repository, follow the steps to clean, analyze, and visualize data for Vermont\n\n-   **Homework is due by COB on Friday, May 10.** This ensures Krista has enough time to go through the homework and provide feedback before the next class.\n:::\n:::\n",
    "supporting": [
      "class_3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}