---
title: "Data Cleaning and Processing in R: Part 2"
date: "June 11, 2024"
css:
  - |
    .smaller h1 {
      font-size: 0.5em; /* Adjust the font size as needed */
    }
output:
  quarto::quarto_presentation:
    format: revealjs
    theme: 
      logo: images/primary_full-color.png
      theme: theme/slides.scss # Choose a theme for your presentation (e.g., simple, serif, solarized, etc.)
    incremental: true # Whether to display content incrementally (one step at a time)
    self_contained: true # Whether to create a standalone HTML file
    highlight_style: "github" # Syntax highlighting style (e.g., github, monokai, etc.)
    revealjs:
      controls: true # Display navigation controls (e.g., arrows, slide number, etc.)
      progress: true # Display a progress bar
      slideNumber: true # Display slide numbers
      center: true # Center the content on each slide
      chalkboard: true # Enable chalkboard mode for reveal.js
---

```{r}
#| output: false

library(tidyverse)
library(countdown)
library(tigris)
library(sf)
library(scales)
library(edbuildr)
library(viridis)
library(readxl)




bw_primary <- c("#6D1E4A", # 1 plum
                "#007786", # 2 teal
                "#0D525A", # 3 dark green
                "#212B46", # 4 navy
                "#5A6675", # 5 grey
                "#F0DEC1") # 6 cream

bw_secondary <- c("#FFC762", # 1 yellow
                  "#FFB653", # 2 orange
                  "#BEC6CE", # 3 light grey
                  "#2E1A4A", # 4 deep purple
                  "#7EA2D1", # 5 soft blue
                  "#CAD3FB", # 6 lavender
                  "#9CD4EA", # 7 sky
                  "#FFA497") # 8 peach


```

## Agenda

-   Homework Review 
-   Creating unique identifiers to join data frames
-   Summarizing data
-   Homework and next class

# Homework Review

## Joining Data Frames 

I owe you all feedback on homework. I had a couple of projects get away from me, so I will get you feedback by EOW. So sorry!

```{r echo=TRUE, eval=FALSE}
# load the English Language Learner data from the Common Core of Data
ell_dist_fy19_raw <- read_excel("week_4_data/ccd_ell_dist_raw_fy19.xls")

# Load the Special Education student data from the Common Core of Data
sped_dist_fy19_raw <- read_excel("week_4_data/ccd_sped_dist_raw_fy19.xls")

# Clean the ell_dist_raw_fy19 dataframe ------
ell_dist_fy19_clean <- ell_dist_fy19_raw |>
  rename_with(tolower) |>
  rename(state = statename, 
         district = lea_name,
         dist_id = leaid,
         ell_enroll = lep_count) |>
  select(state, dist_id, district, ell_enroll)


# Clean the sped_dist_raw_fy19 dataframe ------
sped_dist_fy19_clean <- sped_dist_fy19_raw |>
  rename_with(tolower) |>
  rename(state = statename, 
         district = lea_name,
         dist_id = leaid,
         sped_enroll = idea_count) |>
  select(state, dist_id, district, sped_enroll)

# Join the two data sets ------

# Look at both data sets and decide the common identifier that can be used to join 
# them and then do so!

sped_ell_join <- ell_dist_fy19_clean |>
  left_join(sped_dist_fy19_clean, by = "dist_id")

```

# Creating Unique Identifiers

## Your data will rarely come in a single table, so you will need to use join functions to merge the data frames {.smaller}

To join two data frames, they need to share a common column with a unique identifier.

State departments of education typically assign a unique ID number to each school district. **Make sure this is available in your data sets.**

Joining data sets on a name (e.g. school or district) can create problems based on:

-   Capitalization (Mcgregor v. McGregor)
-   Abbreviation (St. Paul v. Saint Paul)
-   Mis-spelling (it happens!)

## The identifiers are not always in the same format. We can use `paste()` and `paste0()` to combine two columns ot create an identifer

in R, `paste()` and `paste0()` are both functions that are used to concatenate strings, but they differ in how they handle separators: 

- The `paste()` function concatenates strings and allows you to specify a separator between the strings using the `sep` argument. If you do not specify a separator, it defaults to a space (" ").
- The `paste0()` function is a convenience function that concatenates strings without any separator. It is equivalent to using `paste(..., sep = "")`.

## Live coding example: Minnesota MCA and FRPL data 
```{r echo=TRUE, eval=FALSE}

# Create the unique identifier -----

# Create a unique identifer with paste0
mn_mca_frpl_district_fy22_clean <- mn_mca_frpl_district_fy22 |>
  # This tells us that we want the number to have 4 values 
  mutate(dist_number = str_pad(dist_number, width = 4, pad = "0"),
         dist_id = paste0(dist_type, dist_number))

# Another way to do this is with paste

mn_mca_frpl_district_fy22_other <- mn_mca_frpl_district_fy22 |>
  # This tells us that we want the number to have 4 values 
  mutate(dist_number = str_pad(dist_number, width = 4, pad = "0"),
         dist_id = paste(dist_type, dist_number, sep = ""))

# Join the MCA and FRPL data -----

# mn_mca_frpl_data <- mn_mca_frpl_district_fy22_clean |>
#   left_join(mn_frpl_district_clean, by = "dist_id") 
# Once we have shown this example, we will comment this out otherwise we will get 
# en error 

# We have an error because they are incompatible types. The "dist_id" in the 
# "mn_frpl_district_clean" data frame is a number and the "dist_id" variable in the 
# "mn_mca_frpl_district_fy22_clean" is a "character. We can convert either of them, 
# but for this example we will convert the id to a number

mn_mca_frpl_join <- mn_mca_frpl_district_fy22_clean|>
  mutate(dist_id = as.numeric(dist_id, na.rm = T)) |>
  left_join(mn_frpl_district_clean, by = "dist_id") 

# We notice that there are two districts. To rectify this we will remove the 
# extra district from one of the data frames. I will choose to remove the district 
# column in mn_frpl_district_clean because it's uppercase 

mn_frpl_district_clean <- mn_frpl_district_clean |>
  # We can use the subtract the sign in front of a column so that it won't be included in the data frame 
  select(-district)

# When we join the data frames there will only be one district column 
mn_mca_frpl_join_no_extra_district <- mn_mca_frpl_district_fy22_clean|>
  mutate(dist_id = as.numeric(dist_id, na.rm = T)) |> # This mean that anything with an NA is read as 0 
  left_join(mn_frpl_district_clean, by = "dist_id") |>
  # This removes the two columns we no longer want
  select(-dist_type, -dist_number) 

# Clean up the joined data frame ----

# We notice that there are no charter schools in the FRPL data, so we will drop that 
mn_mca_frpl_district <- mn_mca_frpl_join_no_extra_district |>
  filter(total_enroll > 0) |>
  # we also notice that the counts fo the MCA tests are characters, and not numbers
  # so we will convert them into numbers 
  mutate(does_not_meet_count = as.numeric(does_not_meet_count, na.rm = T),
         partially_meets_count = as.numeric(partially_meets_count, na.rm = T),
         meets_count = as.numeric(meets_count, na.rm = T),
         exceeds_count = as.numeric(exceeds_count, na.rm = T)) |>
  select(dist_id, district, total_enroll, everything())


```

# Summarizing Data

## We can use the `group_by()` function to summarize data {.smaller}

::: columns
::: {.column width="45%"}

The `group_by()` function is part of the `dplyr` package. The primary purpose of `group_by()` is to group a data frame by one or more variables, which allows you to perform operations on subsets of the data independently.

-   Used to define groups of rows based on the values of one or more columns
-   It is usually followed by summarizing functions like `summarize()`, `mutate()`, or other dplyr functions to perform calculations within each group.
-   It simplifies data analysis tasks by allowing you to focus on grouped subsets of the data.

:::

::: {.column width="45%"}

![](https://swcarpentry.github.io/r-novice-gapminder/fig/13-dplyr-fig3.png)

:::
:::

## Common functions for summarizing data {.smaller}

After the `group_by()` function is used, then there are several different functions we can use with the `summarise()` function to summarize the data. A few are listed below: 

- The `sum()` function calculates the sum of the values in each group.  
- The `first()` function returns the first value in each group. 
- The `last()` function returns the last value in each group. 
- The `median()` function calculates the median of values in each group. 
- The `min()` and `max()` functions minds the minimum and maximum value in each group. 
- The `n()` function counts the number of observations in each group. 
- The `n_distinct()` function counts the number of distinct values in each group. 

## Live Coding Example: Minnesota FRPL Data 

```{r echo=TRUE, eval=FALSE}

# Summarize the school data to create a district summary -----

mca_frpl_district_summary <- mca_frpl_school_fy22_clean |>
  # We are going to group the data by the dist_id, which is the unique 
  # district identifier we created 
  group_by(dist_id) |>
  # The "first" indicates to keep the first value. So this will keep the 
  # identification for district and dist_id
  summarise(dist_id = first(dist_id), 
            district = first(district),
            # The "sum" totals the values of the columns we are specifying
            total_tested = sum(total_tested, na.rm = T),
            does_not_meet_count = sum(does_not_meet_count, na.rm =T),
            partially_meets_count = sum(partially_meets_count, na.rm = T),
            meets_count = sum(meets_count, na.rm = T),
            exceeds_count = sum(exceeds_count, na.rm = T))

# We can also make a state summary -----

mca_frpl_state_summary <- mca_frpl_district_summary |>
  # We do not need to use group_by() because we are only going to have one value
  summarise(total_tested = sum(total_tested, na.rm = T),
            does_not_meet_count = sum(does_not_meet_count, na.rm =T),
            partially_meets_count = sum(partially_meets_count, na.rm = T),
            meets_count = sum(meets_count, na.rm = T),
            exceeds_count = sum(exceeds_count, na.rm = T)) |>
  mutate(state = "Minnesota") |>
  select(state, everything())

```

# Next Class and Homework

## Coming Up

::: columns
::: {.column width="45%"}
**Next Class**

-   The next class will be **Tuesday, July 23 from 11:00 AM - 12:00 PM CT.**

-   We will do more advanced data visualizations in ggplot2 and plotly
:::

::: {.column width="45%"}
**Homework**

-   Homework will be distributed in `hw-wk-5` repository where you will practice summarizing data 
-   Come to class on July 23 with 2-3 data frames. Krista will show you all how to create a repository so you can do your own data cleaning, analysis, and visualization on a project.

:::
:::




