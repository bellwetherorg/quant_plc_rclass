---
title: "Basic data visualization using `ggplot2`"
date: "April 23, 2024"
css:
  - |
    .smaller h1 {
      font-size: 0.5em; /* Adjust the font size as needed */
    }
output:
  quarto::quarto_presentation:
    format: revealjs
    theme: "simple" # Choose a theme for your presentation (e.g., simple, serif, solarized, etc.)
    incremental: true # Whether to display content incrementally (one step at a time)
    self_contained: true # Whether to create a standalone HTML file
    highlight_style: "github" # Syntax highlighting style (e.g., github, monokai, etc.)
    revealjs:
      controls: true # Display navigation controls (e.g., arrows, slide number, etc.)
      progress: true # Display a progress bar
      slideNumber: true # Display slide numbers
      center: true # Center the content on each slide
      chalkboard: true # Enable chalkboard mode for reveal.js
---

```{r}
#| output: false


library(tidyverse)
library(countdown)
library(tigris)
library(sf)
library(scales)
library(edbuildr)
library(viridis)

bw_primary <- c("#6D1E4A", # 1 plum
                "#007786", # 2 teal
                "#0D525A", # 3 dark green
                "#212B46", # 4 navy
                "#5A6675", # 5 grey
                "#F0DEC1") # 6 cream

bw_secondary <- c("#FFC762", # 1 yellow
                  "#FFB653", # 2 orange
                  "#BEC6CE", # 3 light grey
                  "#2E1A4A", # 4 deep purple
                  "#7EA2D1", # 5 soft blue
                  "#CAD3FB", # 6 lavender
                  "#9CD4EA", # 7 sky
                  "#FFA497") # 8 peach


# Krista likes to denote which spreadsheet is raw for transparency 
dist_fy19_raw <- masterpull(data_type = "geo")

# filter Minnesota data and clean -----

# filter, rename, and mutate data for Minnesota 
mn_ed_data <- dist_fy19_raw |>
  filter(State == "Minnesota") |>
  rename(district = NAME,
         county = County,
         enroll = ENROLL, 
         total_local_rev = LR,
         total_state_rev = SR,
         total_state_local_rev = SLR, 
         urbanicity = dUrbanicity,
         operational_schools = dOperational_schools, 
         district_type = dType, 
         white_enroll = dWhite, 
         sped_enroll = dIEP, 
         ell_enroll = dLEP, 
         econ_dis_enroll = StPov,
         bipoc_pct = pctNonwhite, 
         pov_pct = StPovRate,
         median_house_income = MHI, 
         median_prop_value = MPV) |>
  mutate(bipoc_enroll = enroll - white_enroll,
         ell_pct = ell_enroll/enroll, 
         sped_pct = sped_enroll/enroll, 
         local_rev_pp = total_local_rev/enroll,
         state_rev_pp = total_state_rev/enroll,
         local_state_rev_pp = total_state_local_rev/enroll) |>
  select(district, county, enroll, local_rev_pp, state_rev_pp, local_state_rev_pp, 
         total_local_rev, total_state_rev, total_state_local_rev, urbanicity, 
         operational_schools, district_type, pov_pct, bipoc_pct, ell_pct, sped_pct)


```

## Agenda

-   Visualizing local education revenue data with `ggplot2`
-   Cloning a GitHub repository in RStudio
-   Homework and next class

# Visualizing local education revenue data with `ggplot2`

## The `ggplot2` package is the most widely-used data visualization approach in the R ecosystem.

-   Plots in `ggplot2` are created by starting with your data, then building up layers
-   Once your specify your data, you can add layers of "geoms" to create your plot
-   Today we will use `geom_point()`

# Using `ggplot2` is like baking! {.smaller}

![](Screenshot%202024-04-10%20at%205.06.00%20PM.png){fig-align="center"}

# Iterating your way to beauty with `ggplot2` using Minnesota data

## Step 1: Create a basic plot {.smaller}

```{r}
#| echo: true
#| message: true
#| warning: true

# first minnesota plot 
ggplot(mn_ed_data, aes(x = pov_pct, y = local_rev_pp)) +
  geom_point()

```

## Step 2: Address missing values {.smaller}

We need to figure out what's going on with our missing values before we go any further!

```{r}
#| echo: true
# investigate missing values 
mn_na_dist <- mn_ed_data |>
  # The "filter" function is used to select rows. the "is.na" is telling R to choose the following rows that have an NA. 
  filter(is.na(enroll)) 

# The data frame will automatically open in a new tab 
view(mn_na_dist)


```

The missing data makes sense. All eight of the rows don't have any available data.

## Step 3: Clean up formatting of the scatter plot elements (1/5) {.smaller}

Now that we understand our missing data, we can create an updated dataframe and re-plot our newly cleaned data.

```{r}
#| echo: true
#| output-location: slide
#| message: true

# We should also check to see the districts that have no enrollment 

mn_no_enroll <- mn_ed_data |> 
  filter(enroll == 0)


# Drop the districts that have no enrollment or their enrollment is NA 
mn_ed_clean <- mn_ed_data |>
  filter(enroll > 0)

# first minnesota plot w/ clean data
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp)) +
  geom_point()


```

## Step 3: Clean up formatting of chart elements (2/5) {.smaller}

We see some overlap in the points. Reducing the opacity of the points can be accomplished by setting the `alpha` parameter in geom_point() to a value less than 1. Setting it to .5 will make data points 50% translucent.

```{r}
#| echo: true
# reduce opacity of points
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp)) +
  geom_point(alpha = .5)


```

## Step 3: Clean up formatting of chart elements (3/5) {.smaller}

Let's take care of some formatting issues.

Our axes don't look great - the decimals ought to be percentages and the vertical axis represents dollars. Here, the `scales` package provides some help.

```{r}
#| echo: true
#| output-location: slide

# format axes 
library(scales)

# format the x and y axes
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp)) +
  geom_point(alpha = .5) + 
# make sure you have the `scales` package loaded!
  scale_x_continuous(labels = label_percent()) +
  scale_y_continuous(labels = label_dollar())


```

## Step 3: Clean up formatting of chart elements (4/5) {.smaller .scrollable}

Next, we should add some labels to our axes that make sense, along with a title for our plot and a caption that details our data sources.

```{r}
#| echo: true
#| output-location: slide

# add data labels 
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp)) +
  geom_point(alpha = .5) + 
# make sure you have the `scales` package loaded!
  scale_x_continuous(labels = label_percent()) +
  scale_y_continuous(labels = label_dollar()) + 
    labs(x = "Student Poverty Rate", y = "Local Per-Pupil Revenue",
       title = "Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts",
       caption = "Source: Edbuild Data, 2019") 

```

## Step 3: Clean up formatting of chart elements (5/5) {.smaller .scrollable}

Themes can be used to change the appearance of elements in your plot. There are many stock options, but I prefer `theme_bw()` for its clean appearance and helpful and unobtrusive grid lines.

```{r}
#| echo: true
#| output-location: slide

# change theme
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp)) +
  geom_point(alpha = .5) + 
  scale_x_continuous(labels = label_percent()) +
  scale_y_continuous(labels = label_dollar()) + 
    labs(x = "Student Poverty Rate", y = "Local Per-Pupil Revenue",
       title = "Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts",
       caption = "Source: Edbuild Data, 2019") +
  theme_bw()


```

## Step 4: Add a new layer of data {.smaller .scrollable}

Now that we have a decent-looking graph, let's add in a new data element to vary point size by enrollment.

```{r}
#| echo: true
#| output-location: slide

# add size element 
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll)) +
  geom_point(alpha = .5) + 
  scale_x_continuous(labels = label_percent()) +
  scale_y_continuous(labels = label_dollar()) +
    labs(x = "Student Poverty Rate", y = "Local Per-Pupil Revenue",
       title = "Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts",
       caption = "Source: Edbuild Data, 2019") +
  theme_bw()


```

## Step 5: Tidy up formatting (1/2) {.smaller .scrollable}

Adding a new variable for size creates a legend. We need to tidy the legend's labels and the title.

```{r}
#| echo: true
#| output-location: slide

# clean up the legend
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll)) +
  geom_point(alpha = .5) + 
  scale_x_continuous(labels = label_percent()) +
  scale_y_continuous(labels = label_dollar()) + 
  # change legend label formatting
  scale_size(labels = comma) +
    labs(x = "Student Poverty Rate", y = "Local Per-Pupil Revenue",
       title = "Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts",
       caption = "Source: Edbuild Data, 2019",
       # add nice label for size element
  size = "Enrollment") +
  theme_bw()


```

## Step 5: Tidy up formatting (2/2) {.smaller .scrollable}

We can also adjust some paramenters to allow for more visual contrast in size. By default, `ggplot2` will adjust points' radii based on the size variable. Using area is a more visually honest way to represent the data, so let's make that change.

```{r}
#| echo: true
#| output-location: slide

# create more contrast in size
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll)) +
  geom_point(alpha = .5) + 
  scale_x_continuous(labels = label_percent()) +
  scale_y_continuous(labels = label_dollar()) + 
  # change size scaling to vary by area, not radius + change max size
  scale_size_area(labels = label_comma(), max_size = 10) + 
  labs(x = "Student Poverty Rate", y = "Local Per-Pupil Revenue",
       title = "Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts",
       caption = "Source: Edbuild Data, 2019",
       # add nice label for size element
       size = "Enrollment") +
  theme_bw()

```

## Step 6: Repeat steps 4-5 as needed (1/5) {.smaller .scrollable}

Adding color can be helpful. Let's add color based on urbanicity.

```{r}
#| echo: true
#| output-location: slide

# add in color based on urbanicity
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll,
                        color = urbanicity)) +
  geom_point(alpha = .5) + 
  scale_x_continuous(labels = percent_format(accuracy = 1)) +
  scale_size_area(labels = comma, max_size = 10) + 
  labs(x = "Student Poverty Rate", y = "Local Per-Pupil Revenue",
       title = "Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts",
       caption = "Source: Edbuild Data, 2019",
       size = "Enrollment") +
  theme_bw()

```

## Step 6: Repeat steps 4-5 as needed (2/5) {.smaller .scrollable}

That doesn't look great. Let's use some more functions from the `tidyverse` to clean up the data a little more to reduce 11 urbanicity levels to four, then tidy up the legend label.

-   `as.factor`: Function that is used to convert a vector ior a column in a dataframe into a factor. Factors are used to represent categorical data where the possible values of the variable are limited.
-   `fct_collapse`: Part of the `forcats` package and is a function that is used to collapse or group levels of a factor into new levels. This can be useful for combining similar categories or reducing the number of levels in a factor.

```{r}
#| echo: true
#| output-location: slide

# clean up the unicorn vomit
mn_ed_clean <- mn_ed_clean |>
  mutate(urbanicity = fct_collapse(as.factor(urbanicity),
                                   City = c("11-City: Large", 
                                            "12-City: Mid-size",
                                            "13-City: Small"),
                                   Suburb = c("21-Suburb: Large",
                                              "22-Suburb: Mid-size",
                                             "23-Suburb: Small"),
                                   Town = c("31-Town: Fringe",
                                            "32-Town: Distant",
                                            "33-Town: Remote"),
                                   Rural = c("41-Rural: Fringe",
                                             "42-Rural: Distant",
                                             "43-Rural: Remote")))


ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll,
                        color = urbanicity)) +
  geom_point(alpha = .5) + 
  scale_x_continuous(labels = label_percent()) +
  scale_y_continuous(labels = label_dollar()) +
  scale_size_area(labels = label_comma(), max_size = 10) +  
  labs(x = "Student Poverty Rate", y = "Local Per-Pupil Revenue",
       title = "Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts",
       caption = "Source: Edbuild Data, 2019",
       size = "Enrollment") +
  theme_bw()


```

## Step 6: Repeat steps 4-5 as needed (3/5) {.smaller .scrollable}

We can and should adjust the colors used. R recognizes some pretty funky color names, which can be found in this helpful cheat sheet.

```{r}
#| echo: true
#| output-location: slide

# adjust colors manually
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll,
                        color = urbanicity)) +
  geom_point(alpha = .5) + 
    # create manual color palette
  # color names pulled from a pdf y'all should bookmark
  # http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
  scale_color_manual(values = c("tomato3", "steelblue2",
                                "seagreen3", "orchid1")) +
  scale_x_continuous(labels = label_percent()) +
  scale_y_continuous(labels = label_dollar()) +
  scale_size_area(labels = label_comma(), max_size = 10) + 
  labs(x = "Student Poverty Rate", y = "Local Per-Pupil Revenue",
       title = "Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts",
       caption = "Source: Edbuild Data, 2019",
       size = "Enrollment") +
  theme_bw()


```

## Step 6: Repeat steps 4-5 as needed (4/5) {.smaller .scrollable}

We should strive to make our analyses as accessible as possible. The `viridis` package includes some color palettes that are friendly for folks with color blindness, which affects 5-10 percent of the US population.

```{r}
#| echo: true
#| output-location: slide

# use colors better for visual impairments
library(viridis)
# adjust colors manually

ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll,
                        color = urbanicity)) +
  geom_point(alpha = .5) + 
  # use a colorblind-friendly palette
  scale_color_viridis_d() +
  scale_x_continuous(labels = label_percent()) +
  scale_y_continuous(labels = label_dollar()) +
  scale_size_area(labels = label_comma(), max_size = 10) + 
  labs(x = "Student Poverty Rate", y = "Local Per-Pupil Revenue",
       title = "Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts",
       caption = "Source: Edbuild Data, 2019",
       size = "Enrollment") +
  theme_bw()


```

## Step 6: Repeat steps 4-5 as needed (5/5) {.smaller .scrollable}

Let's adjust the range of colors used to exclude that hard-to-see yellow.

```{r}
#| echo: true
#| output-location: slide

# that yellow is hard to see - let's adjust the range
ggplot(mn_ed_clean, aes(x = pov_pct, y = local_rev_pp, size = enroll,
                        color = urbanicity)) +
  geom_point(alpha = .5) + 
  # adjust color range
  scale_color_viridis_d(end = .8) +
  scale_x_continuous(labels = label_percent()) +
  scale_y_continuous(labels = label_dollar()) +
  scale_size_area(labels = label_comma(), max_size = 10) + 
  labs(x = "Student Poverty Rate", y = "Local Per-Pupil Revenue",
       title = "Local Per-Pupil Revenue by Student Povert Rate in Minnesota School Districts",
       caption = "Source: Edbuild Data, 2019",
       size = "Enrollment") +
  theme_bw()


```

# Cloning a GitHub repository in RStudio

## You will receive an email with an invitation to join the GitHub organization for this training {.smaller}

![](Screenshot%202024-04-22%20at%201.37.25%20PM.png){fig-align="center"}

## Once you click the "View Invitation" button, you will be directed to join the organization {.smaller}

![](Screenshot%202024-04-22%20at%201.47.33%20PM.png){fig-align="center"}

## Bookmark the organization page

Your homework assignments will show up here as repositories

![](Screenshot%202024-04-22%20at%201.47.46%20PM.png){fig-align="center"}

## To start an assignment, navigate to the repository and copy the HTTPS link that appears when you click the "Code" button {.smaller}

![](Screenshot%202024-04-22%20at%201.49.26%20PM.png){fig-align="center"}

## Next, you'll open RStudio and create a new project, selecting the "Version control" and "Git" options {.smaller}

![](git_process/04-new-proj.png){fig-align="center"}

## Next, you'll open RStudio and create a new project, selecting the "Version Control" and "Git" options {.smaller}

![](git_process/05-git-proj.png){fig-align="center"}

## Be sure to select a folder where you want to have your homework files saved before you click "Open" {.smaller}

![](git_process/06-select-path.png){fig-align="center"}

## You're now ready to start working on your homework!

Start by opening the README.md file

![](Screenshot 2024-04-22 at 3.30.25 PM.png){fig-align="center"}

## The README.md file is a text file that will include instructions for your assignment

Using the "Visual" option will make it easier to read

![](Screenshot 2024-04-22 at 3.30.35 PM.png){fig-align="center"}

## The README.md file is a text file that will include instructions for your assignment

Using the "Visual" option will make it easier to read

![](Screenshot 2024-04-22 at 3.30.43 PM.png){fig-align="center"}

## Once you've completed your assignment, you'll want to "stage" your changes and then start the "commit" process {.smaller}

![](git_process/12-gh-push.png){fig-align="center"}

# Next Class and Homework

## Coming Up {.smaller}

::: columns
::: {.column width="45%"}
**Next Class**

-   The next class will be **Tuesday, May 14 from 11:00 AM - 12:00 PM CT.**

-   We will build on our data cleaning and analysis skills, including how to join multiple data sets
:::

::: {.column width="45%"}
**Homework**

-   In the homework repository, follow the steps to clean, analyze, and visualize data for Vermont

-   **Homework is due by COB on Friday, May 10.** This ensures Krista has enough time to go through the homework and provide feedback before the next class.
:::
:::
