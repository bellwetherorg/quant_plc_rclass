{
  "hash": "0eb469d63f98d8daecce4d0c3b956886",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basic data analysis (tidyverse)\"\ndate: \"April 9, 2023\"\nformat: \n  revealjs:\n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: false\n---\n\n::: {.cell}\n\n:::\n\n\n## Agenda\n\n-   Introduction to the `tidyverse` (10 minutes)\n-   Live coding demonstration (10 minutes)\n-   Partner work cleaning a data set (20 minutes)\n-   Creating a token and cloning a GitHub repository in RStudio (15 minutes)\n-   Next class and homework (5 minutes)\n\n# Introduction to the `tidyverse`\n\n## R is a functional programming language - most of what you will do in R is work with functions\n\nA function:\n\n-   Takes a specific input\n-   Performs an operation\n-   Returns in output\n\nFunctions are helpful tools to reduce repetition in typing and improves your code's consistency, reliability and readability.\n\n## The tidyverse is a powerful collection of R packages that work well together {.smaller .scrollable}\n\n::: columns\n::: {.column width=\"50%\"}\n::: columns\n-   The most popular packages in the R community are past of what is called the \"tidyverse,\" which includes packages like `ggplot2`, `tidyr`, `stringr`, `tibble`, and `purrr`.\n\n-   `Tidyverse` packages are built to work together. Every `tidyverse` package contains functions that can manipulate or visualize data that lives in data frames.\n\n-   Most functions in the `tidyverse` require a data frame (R's version of a table) as the first argument in each function. The functions can be \"chained\" together with other functions.\n\n-   We will explore the `tidyverse` by looking at EdBuild's FY2019 education data compiled from the F33 survey, SAIPE, EDGE, and CCD. The `edbuildr` package provides access to clean district data on funding, student demographics, and wealth.\n:::\n:::\n\n::: {.column width=\"50%\"}\n![](https://education.rstudio.com/blog/2020/07/teaching-the-tidyverse-in-2020-part-1-getting-started/img/tidyverse-packages.png)\n:::\n:::\n\n## To read EdBuild's finance data into our working environment we will use the masterpull() function {.smaller .scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(edbuildr)\n\nedbuild_fin_fy19 <- masterpull(data_year = 2019, data_type = \"fin\")\n```\n:::\n\n\nThis code will load the `edbuildr` package and then download a clean dataframe from EdBuild's server and store it as a variable called `edbuild_fin_fy19`.\n\nThere are three options for the `data_type` argument:\n\n-   \"geo\": only includes districts with geographic boundaries (no charter/special school districts) that meet EdBuild's criteria for fiscal analysis\n-   \"fin\": includes all districts that meet EdBuild's criteria for fiscal analysis\n-   \"full\": includes all districts -- TO BE USED WITH CAUTION\n\n## The dplyr() package provides many functions to manipulate your data frames' columns and rows {.smaller .scrollable}\n\nThe functions you'll most frequently use from the dplyr packages are:\n\n-   `select()`: names columns to keep from a data frame\n-   `rename()`: name columns to keep from a data frame\n-   `filter()`: remove rows that do not meet the condition in the logical statement from the output\n-   `mutate()`: create a new column that will be added to the end of your data frame.\n\n## A special operator called a \"pipe\" will allow you to chain several functions together {.smaller .scrollable}\n\n-   In R, the pipe operator is a vertical bar and a greater-than sign: `|>`\n\n-   Instead of \"nesting\" the results of one function inside of another, the pipe allows you to execute the same command in a more human-readable order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# example of \"nesting\" the result of one function inside another function. \ndf1 <- select(filter(raw_df, enroll > 10000), dist_id, dist_name, enroll, rev_pp)\n\n# example of using the \"pipe\" to produce the same as above \n# read the pipe as \"and then\" to understand what's being done to your data\ndf2 <- raw_df |> # start with raw_df AND THEN DO THIS \n  filter(enroll > 10000) |> # filter for enrollment > 10,000 AND THEN DO THIS \n  select(dist_id, dist_name, enroll, rev_pp) # select only these columns\n```\n:::\n\n\n# Iterative exploratory analysis\n\n## LIVE CODING EXAMPLE: exploring_the_tidyverse.R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# class_2_example \n# Last updated by Krista Kaput, 2024-03-29\n\n# load ----------\n\noptions(scipen = 999)\n\nlibrary(tidyverse)\nlibrary(edbuildr)\n\n# Krista likes to denote which spreadsheet is raw for transparency \ndist_fy19_raw <- masterpull(data_type = \"geo\")\n\n# Use the \"filter\" function to get the Minnesota data -----------\n\nmn_ed_data <- dist_fy19_raw |>\n  filter(State == \"Minnesota\") \n\n# Use \"rename\" function to change names of Minnesota variables --------\n\nmn_ed_data <- mn_ed_data |>\n  rename(district = NAME,\n         county = County,\n         enroll = ENROLL, \n         total_local_rev = LR) \n\n\n# Use \"mutate\" function to create a local revenue pp variable -----\nmn_ed_data <- mn_ed_data |>\n  mutate(local_rev_pp = total_local_rev/enroll) \n\n# Filter the districts that do not have enrollment or have NA enrollment ------\n\nmn_ed_data_clean <- mn_ed_data |>\n  filter(enroll > 0)\n\n# Use \"select\" function to choose the variables you want in your data frame ---------\n\nmn_ed_data_clean <- mn_ed_data_clean |>\n  select(district, county, enroll, total_local_rev, local_rev_pp)\n```\n:::\n\n\n# Partner Work\n\n## In pairs, you will work together to create a clean data frame for a state.\n\n-   **Julia and Kelly:** Illinois\n-   **Indira and Priyanka:** Tennessee\n-   **Marisa and Brian:** Maryland\n-   **Ebony,Teresa, and Libby:** Virginia\n-   **Sophie and Nora:** Massachusetts\n\nKrista and Alex will be circulating to the different pairs to answer questions and offer support.\n\n# Creating a Token and Cloning a GitHub Repository in RStudio\n\n## Go to https://github.com/setting/tokens {.smaller}\n\nUnder \"Generate New Token\" Choose the \"Classic\" option\n\n![](class_2_images/Screenshot%202024-04-08%20at%209.22.12%20PM.png){fig-align=\"center\"}\n\n## Name the token something useful like \"2024-quant-plc-r-class\" {.smaller}\n\nYou can choose an expiration date, but I have chosen no expiration date. Select the following: \"repo\", \"user\", \"gist\", and \"workflow\" and then generate your token. SAVE YOUR TOKEN!!!!\n\n![](class_2_images/Screenshot%202024-04-08%20at%209.15.34%20PM.png){fig-align=\"center\"}\n\n## You will receive an email with an invitation to join the GitHub organization for this training {.smaller}\n\n![](class_2_images/Screenshot%202024-04-08%20at%205.35.56%20PM.png){fig-align=\"center\"}\n\n## Once you click the \"View Invitation\" button, you will be directed to join the organization {.smaller}\n\n![](class_2_images/Screenshot%202024-04-08%20at%208.37.30%20PM.png){fig-align=\"center\"}\n\n## Bookmark the organization page \nYour homework assignments will show up here as repositories\n\n![](class_2_images/Screenshot%202024-04-08%20at%208.38.30%20PM.png){fig-align=\"center\"}\n\n## To start an assignment, navigate to the repository and copy the HTTPS link that appears when you click the \"Code\" button {.smaller}\n\n![](class_2_images/Screenshot%202024-04-08%20at%208.45.25%20PM.png){fig-align=\"center\"}\n\n## Next, you'll open RStudio and create a new project, selecting the \"Version control\" and \"Git\" options {.smaller}\n\n![](git_process/04-new-proj.png)\n\n## Next, you'll open RStudio and create a new project, selecting the \"Version Control\" and \"Git\" options {.smaller}\n\n![](git_process/05-git-proj.png)\n\n## Be sure to select a folder where you want to have your homework files saved before you click \"Open\" {.smaller}\n\n![](git_process/06-select-path.png){fig-align=\"center\"}\n\n## You're now ready to start working on your homework! \nStart by opening the README.md file \n\n![](class_2_images/Screenshot%202024-04-08%20at%209.04.09%20PM.png){fig-align=\"center\"}\n\n## The README.md file is a text file that will include instructions for your assignment\nUsing the \"Visual\" option will make it easier to read \n\n![](class_2_images/Screenshot%202024-04-08%20at%208.49.48%20PM.png){fig-align=\"center\"}\n\n## The README.md file is a text file that will include instructions for your assignment \nUsing the \"Visual\" option will make it easier to read \n\n![](class_2_images/Screenshot%202024-04-08%20at%208.50.06%20PM.png){fig-align=\"center\"}\n\n## Once you've completed your assignment, you'll want to \"stage\" your changes and then start the \"commit\" process {.smaller}\n\n![](git_process/12-gh-push.png){fig-align=\"center\"}\n\n# Next Class and Homework\n\n## Coming Up {.smaller .scrollable}\n\n::: columns\n::: {.column width=\"45%\"}\n**Next Class**\n\n-   The next class will be **Tuesday, April 23 from 11:00 AM - 12:00 PM CT.**\n\n-   We will do a deep dive into the `ggplot2` and do basic data visualization in R (scatterplots)\n:::\n\n::: {.column width=\"45%\"}\n**Homework**\n\n- Coding task: Use the hw_02_template.R file in the /scripts folder to complete the tasks that are outlined in the script. \n- **Homework is due by COB on Thursday, April 18**. This ensures that Krista can review your assignments and provide feedback by the April 23 R Class. \n- Please make sure you commit and then push your homework updates using Git to update the repository.\n\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}